diff --git a/src/game/ingame_menu.c b/src/game/ingame_menu.c
index 7ae9f1e..98359b2 100644
--- a/src/game/ingame_menu.c
+++ b/src/game/ingame_menu.c
@@ -3,4 +3,5 @@
 #include "actors/common1.h"
 #include "area.h"
+#include "time_trials.h"
 #include "audio/external.h"
 #include "camera.h"
@@ -2135,4 +2136,5 @@ void shade_screen(void) {
     gSPDisplayList(gDisplayListHead++, dl_draw_text_bg_box);
     gSPPopMatrix(gDisplayListHead++, G_MTX_MODELVIEW);
+    gTimeTableDisplayListHead = gDisplayListHead;
 }
 
@@ -2523,4 +2525,5 @@ void render_pause_castle_main_strings(s16 x, s16 y) {
     void *courseName;
 
+    if (time_trials_render_time_table(&gDialogLineNum)) { return; }
     u8 strVal[8];
     s16 starNum = gDialogLineNum;
@@ -2639,5 +2642,5 @@ s16 render_pause_courses_and_castle(void) {
             if ((gMarioStates[0].action & ACT_FLAG_PAUSE_EXIT) || (Cheats.EnableCheats && Cheats.ExitAnywhere)) {
                 render_pause_course_options(99, 93, &gDialogLineNum, 15);
-            }
+            } else time_trials_render_time_table(&gDialogLineNum);
 
 #ifdef VERSION_EU
@@ -2869,5 +2872,5 @@ void render_course_complete_lvl_info_and_hud_str(void) {
 
         if (gLastCompletedStarNum == 7) {
-            name = segmented_to_virtual(actNameTbl[COURSE_STAGES_MAX * 6 + 1]);
+            name = segmented_to_virtual(actNameTbl[COURSE_STAGES_MAX * 6]);
         } else {
             name = segmented_to_virtual(actNameTbl[(gLastCompletedCourseNum - 1) * 6 + gLastCompletedStarNum - 1]);
@@ -3072,4 +3075,5 @@ s16 render_menus_and_dialogs() {
 
     create_dl_ortho_matrix();
+    time_trials_update(gMenuMode != -1);
 
     if (gMenuMode != -1) {
diff --git a/src/game/time_trials.c b/src/game/time_trials.c
new file mode 100644
index 0000000..cb3da24
--- /dev/null
+++ b/src/game/time_trials.c
@@ -0,0 +1,1283 @@
+#include "time_trials.h"
+#include "sm64.h"
+#include "game_init.h"
+#include "sound_init.h"
+#include "geo_commands.h"
+#include "gfx_dimensions.h"
+#include "ingame_menu.h"
+#include "level_update.h"
+#include "object_helpers.h"
+#include "object_list_processor.h"
+#include "save_file.h"
+#include "segment2.h"
+#include "spawn_object.h"
+#include "pc/cheats.h"
+#include "pc/cliopts.h"
+#include "pc/configfile.h"
+#include "pc/fs/fs.h"
+#include "engine/math_util.h"
+#include "audio/external.h"
+#include <stdio.h>
+
+#define TIME_TRIALS_MAX_ALLOWED_TIME    17999 // 9'59"99
+#define TIME_TRIALS_UNDEFINED_TIME      -1
+#ifndef OMM_STARS_NON_STOP
+#define OMM_STARS_NON_STOP              (0)
+#endif
+#ifndef OMM_ALL_STARS
+#define OMM_ALL_STARS                   (0)
+#endif
+
+static bool sTimeTrialsEnabled = true;
+bool time_trials_enabled() {
+    return sTimeTrialsEnabled;
+}
+
+//
+// Models
+//
+
+#include "time_trials_ghost_geo.inl"
+
+static const BehaviorScript bhvTimeTrialGhost1[] = { 0x08000000, 0x09000000 };
+static const BehaviorScript bhvTimeTrialGhost2[] = { 0x08000000, 0x09000000 };
+
+enum {
+    GHOST_MARIO_DEFAULT = 0,
+    GHOST_MARIO_RED_COINS,
+    GHOST_MARIO_PSS_2,
+    GHOST_MARIO_100_COINS,
+    GHOST_MARIO_ALL_STARS
+};
+static struct GraphNode *time_trials_get_ghost_mario_graph_node(u8 color) {
+    static void *sGhostMarios[5][2] = {
+        { (void *) ghost_mario_blue_geo,  NULL }, // Default ghost
+        { (void *) ghost_mario_red_geo,   NULL }, // Bowser Red coins ghost
+        { (void *) ghost_mario_green_geo, NULL }, // PSS 2 ghost
+        { (void *) ghost_mario_gold_geo,  NULL }, // 100 coins ghost
+        { (void *) ghost_mario_pink_geo,  NULL }, // All Stars ghost
+    };
+    if (sGhostMarios[0][1] == NULL) {
+        for (u8 i = 0; i != 5; ++i) {
+            struct AllocOnlyPool *pool = calloc(1, 0x10000);
+            pool->totalSpace   = 0x10000 - sizeof(struct AllocOnlyPool);
+            pool->usedSpace    = 0;
+            pool->startPtr     = (u8 *) pool + sizeof(struct AllocOnlyPool);
+            pool->freePtr      = (u8 *) pool + sizeof(struct AllocOnlyPool);
+            sGhostMarios[i][1] = process_geo_layout(pool, sGhostMarios[i][0]);
+        }
+    }
+    return sGhostMarios[color][1];
+}
+
+//
+// Utils
+//
+
+static const char *time_trials_get_save_filename() {
+    static char buffer[256];
+    snprintf(buffer, 256, "%s", SAVE_FILENAME);
+    buffer[strlen(buffer) - 4] = 0; // cut extension
+    return buffer;
+}
+
+static const char *time_trials_get_folder(const char *path) {
+    static char buffer[256];
+    snprintf(buffer, 256, "%s/%s", path, time_trials_get_save_filename());
+    return buffer;
+}
+
+// For retro-compatibility
+static const char *time_trials_get_old_filename(const char *path, s32 fileIndex, s32 slotIndex) {
+    static char buffer[256];
+    snprintf(buffer, 256, "%s/%d.%d.ttg", time_trials_get_folder(path), fileIndex, slotIndex);
+    return buffer;
+}
+
+static const char *time_trials_get_new_filename(const char *path, s32 fileIndex, s32 courseIndex, s32 starIndex) {
+    static const char *sCourseTags[] = {
+        "bob", "wf", "jrb", "ccm", "bbh", "hmc", "lll", "ssl", "ddd", "sl", "wdw", "ttm", "thi", "ttc", "rr",
+        "bitdw", "bitfs", "bits", "pss", "cotmc", "totwc", "vcutm", "wmotr", "sa"
+    };
+    static char buffer[256];
+    snprintf(buffer, 256, "%s/%d.%s.%d.ttg", time_trials_get_folder(path), fileIndex, sCourseTags[courseIndex], starIndex);
+    return buffer;
+}
+
+static const u8 *time_trials_int_to_sm64_string(s32 value, const char *format) {
+    static u8 buffer[64];
+    bzero(buffer, 64);
+    if (!format || strlen(format) > 8) {
+        return buffer;
+    }
+    s32 len = snprintf((char *) buffer, 64, format, value);
+    for (s32 i = 0; i < len; ++i) {
+        if (buffer[i] >= 'A' && buffer[i] <= 'F') {
+            buffer[i] = buffer[i] - 'A';
+        } else if (buffer[i] >= 'a' && buffer[i] <= 'f') {
+            buffer[i] = buffer[i] - 'a';
+        } else {
+            buffer[i] = buffer[i] - '0';
+        }
+    }
+    buffer[len] = DIALOG_CHAR_TERMINATOR;
+    return buffer;
+}
+
+//
+// Time Trials Slots
+//
+
+#define NUM_SLOTS                   sizeof(sTimeTrialSlots) / sizeof(sTimeTrialSlots[0])
+#define STAR_CODE(course, star)     (u16)(((u16)(course & 0xFF) << 8) | ((u16)(star & 0xFF) << 0))
+
+static const u16 sTimeTrialSlots[] = {
+
+    /* Main courses */
+    STAR_CODE(COURSE_BOB, 0),
+    STAR_CODE(COURSE_BOB, 1),
+    STAR_CODE(COURSE_BOB, 2),
+    STAR_CODE(COURSE_BOB, 3),
+    STAR_CODE(COURSE_BOB, 4),
+    STAR_CODE(COURSE_BOB, 5),
+    STAR_CODE(COURSE_BOB, 6),
+    STAR_CODE(COURSE_WF, 0),
+    STAR_CODE(COURSE_WF, 1),
+    STAR_CODE(COURSE_WF, 2),
+    STAR_CODE(COURSE_WF, 3),
+    STAR_CODE(COURSE_WF, 4),
+    STAR_CODE(COURSE_WF, 5),
+    STAR_CODE(COURSE_WF, 6),
+    STAR_CODE(COURSE_JRB, 0),
+    STAR_CODE(COURSE_JRB, 1),
+    STAR_CODE(COURSE_JRB, 2),
+    STAR_CODE(COURSE_JRB, 3),
+    STAR_CODE(COURSE_JRB, 4),
+    STAR_CODE(COURSE_JRB, 5),
+    STAR_CODE(COURSE_JRB, 6),
+    STAR_CODE(COURSE_CCM, 0),
+    STAR_CODE(COURSE_CCM, 1),
+    STAR_CODE(COURSE_CCM, 2),
+    STAR_CODE(COURSE_CCM, 3),
+    STAR_CODE(COURSE_CCM, 4),
+    STAR_CODE(COURSE_CCM, 5),
+    STAR_CODE(COURSE_CCM, 6),
+    STAR_CODE(COURSE_BBH, 0),
+    STAR_CODE(COURSE_BBH, 1),
+    STAR_CODE(COURSE_BBH, 2),
+    STAR_CODE(COURSE_BBH, 3),
+    STAR_CODE(COURSE_BBH, 4),
+    STAR_CODE(COURSE_BBH, 5),
+    STAR_CODE(COURSE_BBH, 6),
+    STAR_CODE(COURSE_HMC, 0),
+    STAR_CODE(COURSE_HMC, 1),
+    STAR_CODE(COURSE_HMC, 2),
+    STAR_CODE(COURSE_HMC, 3),
+    STAR_CODE(COURSE_HMC, 4),
+    STAR_CODE(COURSE_HMC, 5),
+    STAR_CODE(COURSE_HMC, 6),
+    STAR_CODE(COURSE_LLL, 0),
+    STAR_CODE(COURSE_LLL, 1),
+    STAR_CODE(COURSE_LLL, 2),
+    STAR_CODE(COURSE_LLL, 3),
+    STAR_CODE(COURSE_LLL, 4),
+    STAR_CODE(COURSE_LLL, 5),
+    STAR_CODE(COURSE_LLL, 6),
+    STAR_CODE(COURSE_SSL, 0),
+    STAR_CODE(COURSE_SSL, 1),
+    STAR_CODE(COURSE_SSL, 2),
+    STAR_CODE(COURSE_SSL, 3),
+    STAR_CODE(COURSE_SSL, 4),
+    STAR_CODE(COURSE_SSL, 5),
+    STAR_CODE(COURSE_SSL, 6),
+    STAR_CODE(COURSE_DDD, 0),
+    STAR_CODE(COURSE_DDD, 1),
+    STAR_CODE(COURSE_DDD, 2),
+    STAR_CODE(COURSE_DDD, 3),
+    STAR_CODE(COURSE_DDD, 4),
+    STAR_CODE(COURSE_DDD, 5),
+    STAR_CODE(COURSE_DDD, 6),
+    STAR_CODE(COURSE_SL, 0),
+    STAR_CODE(COURSE_SL, 1),
+    STAR_CODE(COURSE_SL, 2),
+    STAR_CODE(COURSE_SL, 3),
+    STAR_CODE(COURSE_SL, 4),
+    STAR_CODE(COURSE_SL, 5),
+    STAR_CODE(COURSE_SL, 6),
+    STAR_CODE(COURSE_WDW, 0),
+    STAR_CODE(COURSE_WDW, 1),
+    STAR_CODE(COURSE_WDW, 2),
+    STAR_CODE(COURSE_WDW, 3),
+    STAR_CODE(COURSE_WDW, 4),
+    STAR_CODE(COURSE_WDW, 5),
+    STAR_CODE(COURSE_WDW, 6),
+    STAR_CODE(COURSE_TTM, 0),
+    STAR_CODE(COURSE_TTM, 1),
+    STAR_CODE(COURSE_TTM, 2),
+    STAR_CODE(COURSE_TTM, 3),
+    STAR_CODE(COURSE_TTM, 4),
+    STAR_CODE(COURSE_TTM, 5),
+    STAR_CODE(COURSE_TTM, 6),
+    STAR_CODE(COURSE_THI, 0),
+    STAR_CODE(COURSE_THI, 1),
+    STAR_CODE(COURSE_THI, 2),
+    STAR_CODE(COURSE_THI, 3),
+    STAR_CODE(COURSE_THI, 4),
+    STAR_CODE(COURSE_THI, 5),
+    STAR_CODE(COURSE_THI, 6),
+    STAR_CODE(COURSE_TTC, 0),
+    STAR_CODE(COURSE_TTC, 1),
+    STAR_CODE(COURSE_TTC, 2),
+    STAR_CODE(COURSE_TTC, 3),
+    STAR_CODE(COURSE_TTC, 4),
+    STAR_CODE(COURSE_TTC, 5),
+    STAR_CODE(COURSE_TTC, 6),
+    STAR_CODE(COURSE_RR, 0),
+    STAR_CODE(COURSE_RR, 1),
+    STAR_CODE(COURSE_RR, 2),
+    STAR_CODE(COURSE_RR, 3),
+    STAR_CODE(COURSE_RR, 4),
+    STAR_CODE(COURSE_RR, 5),
+    STAR_CODE(COURSE_RR, 6),
+
+    /* Bowser Courses */
+    STAR_CODE(COURSE_BITDW, 0),
+    STAR_CODE(COURSE_BITDW, 1),
+    STAR_CODE(COURSE_BITFS, 0),
+    STAR_CODE(COURSE_BITFS, 1),
+    STAR_CODE(COURSE_BITS, 0),
+    STAR_CODE(COURSE_BITS, 1),
+
+    /* Secret Courses */
+    STAR_CODE(COURSE_PSS, 0),
+    STAR_CODE(COURSE_PSS, 1),
+    STAR_CODE(COURSE_SA, 0),
+    STAR_CODE(COURSE_WMOTR, 0),
+    STAR_CODE(COURSE_TOTWC, 0),
+    STAR_CODE(COURSE_VCUTM, 0),
+    STAR_CODE(COURSE_COTMC, 0),
+
+    /* All Stars */
+    // Placed here for retro-compatibility
+    STAR_CODE(COURSE_BOB, 7),
+    STAR_CODE(COURSE_WF, 7),
+    STAR_CODE(COURSE_JRB, 7),
+    STAR_CODE(COURSE_CCM, 7),
+    STAR_CODE(COURSE_BBH, 7),
+    STAR_CODE(COURSE_HMC, 7),
+    STAR_CODE(COURSE_LLL, 7),
+    STAR_CODE(COURSE_SSL, 7),
+    STAR_CODE(COURSE_DDD, 7),
+    STAR_CODE(COURSE_SL, 7),
+    STAR_CODE(COURSE_WDW, 7),
+    STAR_CODE(COURSE_TTM, 7),
+    STAR_CODE(COURSE_THI, 7),
+    STAR_CODE(COURSE_TTC, 7),
+    STAR_CODE(COURSE_RR, 7),
+};
+
+static s32 time_trials_get_slot_index(s32 courseNum, s32 starIndex) {
+    u16 starCode = STAR_CODE(courseNum, starIndex);
+    for (u32 i = 0; i != NUM_SLOTS; ++i) {
+        if (sTimeTrialSlots[i] == starCode) {
+            return (s32) i;
+        }
+    }
+    return -1;
+}
+
+#undef STAR_CODE
+
+//
+// Ghost Frame data
+//
+
+struct TimeTrialGhostFrameData {
+    s16 posX;
+    s16 posY;
+    s16 posZ;
+    s8 pitch;
+    s8 yaw;
+    s8 roll;
+    u8 scaleX;
+    u8 scaleY;
+    u8 scaleZ;
+    u8 animIndex;
+    u8 animFrame;
+    u8 level;
+    u8 area;
+};
+#define time_trials_is_end_frame(p, f) (p[f].level == 0)
+
+//
+// Data
+//
+
+enum { TT_TIMER_DISABLED, TT_TIMER_RUNNING, TT_TIMER_STOPPED };
+static s8 sTimeTrialTimerState = TT_TIMER_DISABLED;
+static s16 sTimeTrialTimer = 0;
+static bool sTimeTrialHiScore = false;
+static struct TimeTrialGhostFrameData sTimeTrialGhostDataR1[TIME_TRIALS_MAX_ALLOWED_TIME]; // Read-only, normal/all-stars ghost
+static struct TimeTrialGhostFrameData sTimeTrialGhostDataR2[TIME_TRIALS_MAX_ALLOWED_TIME]; // Read-only, special ghost
+static struct TimeTrialGhostFrameData sTimeTrialGhostDataW[TIME_TRIALS_MAX_ALLOWED_TIME]; // Write-only
+
+//
+// Read
+//
+
+static u16 read_u16(FILE *f) {
+    u8 low, high;
+    if (fread(&high, 1, 1, f)) {
+        if (fread(&low, 1, 1, f)) {
+            return (u16)(((u16)(high) << 8) | ((u16)(low)));
+        }
+    }
+    return 0;
+}
+
+static u8 read_u8(FILE *f) {
+    u8 byte;
+    if (fread(&byte, 1, 1, f)) {
+        return byte;
+    }
+    return 0;
+}
+
+static s16 time_trials_read_ghost_data(s32 fileIndex, s32 courseIndex, s32 starIndex, s32 slotIndex, struct TimeTrialGhostFrameData* ghostData) {
+    if (ghostData != NULL) {
+        bzero(ghostData, (sizeof(struct TimeTrialGhostFrameData) * TIME_TRIALS_MAX_ALLOWED_TIME));
+    }
+
+    // Valid slotIndex
+    if (slotIndex == -1) {
+        return 0;
+    }
+
+    // Open file
+    const char *filename = time_trials_get_new_filename(fs_writepath, fileIndex, courseIndex, starIndex);
+    FILE *f = fopen(filename, "rb");
+    if (f == NULL) {
+        filename = time_trials_get_old_filename(fs_writepath, fileIndex, slotIndex);
+        f = fopen(filename, "rb");
+        if (f == NULL) {
+            return 0;
+        }
+    }
+
+    // Read data
+    s16 length = (s16) read_u16(f);
+    if (ghostData != NULL) {
+        for (s16 i = 0; i != length; ++i) {
+            ghostData[i].posX      = (s16) read_u16(f);
+            ghostData[i].posY      = (s16) read_u16(f);
+            ghostData[i].posZ      = (s16) read_u16(f);
+            ghostData[i].pitch     = (s8) read_u8(f);
+            ghostData[i].yaw       = (s8) read_u8(f);
+            ghostData[i].roll      = (s8) read_u8(f);
+            ghostData[i].scaleX    = read_u8(f);
+            ghostData[i].scaleY    = read_u8(f);
+            ghostData[i].scaleZ    = read_u8(f);
+            ghostData[i].animIndex = read_u8(f);
+            ghostData[i].animFrame = read_u8(f);
+            ghostData[i].level     = read_u8(f);
+            ghostData[i].area      = read_u8(f);
+        }
+    }
+
+    fclose(f);
+    return length;
+}
+
+static s16 *time_trials_time(s32 fileIndex, s32 slotIndex) {
+    static s16 sTimeTrialTimes[NUM_SAVE_FILES][NUM_SLOTS];
+    static bool inited = false;
+    if (!inited) {
+        for (s32 i = 0; i != NUM_SAVE_FILES; ++i) {
+            for (s32 courseIndex = 0; courseIndex != COURSE_MAX; ++courseIndex) {
+                for (s32 starIndex = 0; starIndex != 8; ++starIndex) {
+                    s32 s = time_trials_get_slot_index(courseIndex + 1, starIndex);
+                    if (s != -1) {
+                        s16 t = time_trials_read_ghost_data(i, courseIndex, starIndex, s, NULL);
+                        if (t <= 0 || t > TIME_TRIALS_MAX_ALLOWED_TIME) {
+                            t = TIME_TRIALS_UNDEFINED_TIME;
+                        }
+                        sTimeTrialTimes[i][s] = t;
+                    }
+                }
+            }
+        }
+        inited = true;
+    }
+    return &sTimeTrialTimes[fileIndex][slotIndex];
+}
+
+//
+// Write
+//
+
+static void write_u16(FILE *f, u16 word) {
+    u8 low = (u8)(word);
+    u8 high = (u8)(word >> 8);
+    fwrite(&high, 1, 1, f);
+    fwrite(&low, 1, 1, f);
+}
+
+static void write_u8(FILE *f, u8 byte) {
+    fwrite(&byte, 1, 1, f);
+}
+
+static void time_trials_write_ghost_data(s32 fileIndex, s32 courseIndex, s32 starIndex) {
+
+    // Make folder
+    fs_sys_mkdir(time_trials_get_folder(fs_writepath));
+
+    // Open file
+    const char *filename = time_trials_get_new_filename(fs_writepath, fileIndex, courseIndex, starIndex);
+    FILE *f = fopen(filename, "wb");
+    if (f == NULL) {
+        return;
+    }
+
+    // Write length
+    s16 length = sTimeTrialTimer;
+    write_u16(f, length);
+
+    // Write data
+    for (s16 i = 0; i != length; ++i) {
+        write_u16(f, (u16) sTimeTrialGhostDataW[i].posX);
+        write_u16(f, (u16) sTimeTrialGhostDataW[i].posY);
+        write_u16(f, (u16) sTimeTrialGhostDataW[i].posZ);
+        write_u8(f, (u8) sTimeTrialGhostDataW[i].pitch);
+        write_u8(f, (u8) sTimeTrialGhostDataW[i].yaw);
+        write_u8(f, (u8) sTimeTrialGhostDataW[i].roll);
+        write_u8(f, sTimeTrialGhostDataW[i].scaleX);
+        write_u8(f, sTimeTrialGhostDataW[i].scaleY);
+        write_u8(f, sTimeTrialGhostDataW[i].scaleZ);
+        write_u8(f, sTimeTrialGhostDataW[i].animIndex);
+        write_u8(f, sTimeTrialGhostDataW[i].animFrame);
+        write_u8(f, sTimeTrialGhostDataW[i].level);
+        write_u8(f, sTimeTrialGhostDataW[i].area);
+    }
+
+    // Update times
+    *time_trials_time(fileIndex, time_trials_get_slot_index(courseIndex + 1, starIndex)) = length;
+    fclose(f);
+}
+
+//
+// Get
+//
+
+static s16 time_trials_get_time(s32 fileIndex, s32 courseNum, s32 starIndex) {
+    s32 slotIndex = time_trials_get_slot_index(courseNum, starIndex);
+    if (slotIndex == -1) return TIME_TRIALS_UNDEFINED_TIME;
+    return *time_trials_time(fileIndex, slotIndex);
+}
+
+static s32 time_trials_get_course_time(s32 fileIndex, s32 courseNum) {
+    s32 courseTime = 0;
+    for (s32 starIndex = 0; starIndex < 7; starIndex++) {
+        s32 slotIndex = time_trials_get_slot_index(courseNum, starIndex);
+        s16 t = *time_trials_time(fileIndex, slotIndex);
+        if (t == TIME_TRIALS_UNDEFINED_TIME) {
+            return TIME_TRIALS_UNDEFINED_TIME;
+        }
+
+        courseTime += (s32) t;
+    }
+    return courseTime;
+}
+
+static s32 time_trials_get_bowser_time(s32 fileIndex) {
+    s32 bitdw = time_trials_get_course_time(fileIndex, COURSE_BITDW);
+    if (bitdw == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    s32 bitfs = time_trials_get_course_time(fileIndex, COURSE_BITFS);
+    if (bitfs == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    s32 bits = time_trials_get_course_time(fileIndex, COURSE_BITS);
+    if (bits == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    return bitdw + bitfs + bits;
+}
+
+static s32 time_trials_get_secret_time(s32 fileIndex) {
+    s32 pss = time_trials_get_course_time(fileIndex, COURSE_PSS);
+    if (pss == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    s32 cotmc = time_trials_get_course_time(fileIndex, COURSE_COTMC);
+    if (cotmc == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    s32 totwc = time_trials_get_course_time(fileIndex, COURSE_TOTWC);
+    if (totwc == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    s32 vcutm = time_trials_get_course_time(fileIndex, COURSE_VCUTM);
+    if (vcutm == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    s32 wmotr = time_trials_get_course_time(fileIndex, COURSE_WMOTR);
+    if (wmotr == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    s32 sa = time_trials_get_course_time(fileIndex, COURSE_SA);
+    if (sa == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+    return pss + cotmc + totwc + vcutm + wmotr + sa;
+}
+
+static s32 time_trials_get_total_time(s32 fileIndex) {
+    s32 coursesTime = 0;
+    for (s32 course = COURSE_MIN; course <= COURSE_STAGES_MAX; course++) {
+        s32 t = time_trials_get_course_time(fileIndex, course);
+        if (t == TIME_TRIALS_UNDEFINED_TIME) {
+            return TIME_TRIALS_UNDEFINED_TIME;
+        }
+        coursesTime += t;
+    }
+
+    s32 bowserTime = time_trials_get_bowser_time(fileIndex);
+    if (bowserTime == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+
+    s32 secretTime = time_trials_get_secret_time(fileIndex);
+    if (secretTime == TIME_TRIALS_UNDEFINED_TIME) {
+        return TIME_TRIALS_UNDEFINED_TIME;
+    }
+
+    return coursesTime + bowserTime + secretTime;
+}
+
+//
+// Ghost
+//
+
+struct TimeTrialGhostAnimationData {
+    struct Animation animation;
+    u8 animationData[0x40000];
+    u8 color;
+    u16 prevValidAnimIndex;
+};
+static struct TimeTrialGhostAnimationData sGhostAnimData1;
+static struct TimeTrialGhostAnimationData sGhostAnimData2;
+
+static u16 time_trials_ghost_retrieve_current_animation_index(struct MarioState *m) {
+    struct MarioAnimDmaRelatedThing *animDmaTable = m->animation->animDmaTable;
+    void *a = m->animation->currentAnimAddr;
+    for (u16 i = 0; i != animDmaTable->count; ++i) {
+        void *b = animDmaTable->srcAddr + animDmaTable->anim[i].offset;
+        if (a == b) {
+            return i;
+        }
+    }
+    return 0;
+}
+
+static s32 time_trials_ghost_load_animation(struct TimeTrialGhostAnimationData *animData, struct MarioState *m, u16 animIndex) {
+    struct MarioAnimDmaRelatedThing *animDmaTable = m->animation->animDmaTable;
+    if (animIndex >= animDmaTable->count) {
+        return FALSE;
+    }
+
+    // Raw data
+    u8 *addr = animDmaTable->srcAddr + animDmaTable->anim[animIndex].offset;
+    u32 size = animDmaTable->anim[animIndex].size;        
+    bcopy(addr, animData->animationData, size);
+
+    // Seek index and values pointers
+    struct Animation *a = (struct Animation *) animData->animationData;
+    const u16 *indexStart = (const u16 *) ((uintptr_t) (animData->animationData) + (uintptr_t) (a->index));
+    const s16 *valueStart = (const s16 *) ((uintptr_t) (animData->animationData) + (uintptr_t) (a->values));
+
+    // Fill ghost animation data
+    bcopy(animData->animationData, &animData->animation, sizeof(struct Animation));
+    animData->animation.index = indexStart;
+    animData->animation.values = valueStart;
+    return TRUE;
+}
+
+static void time_trials_ghost_update_animation(struct TimeTrialGhostAnimationData *animData, struct Object *obj, struct MarioState *m, u16 animIndex, u16 animFrame) {
+    if (obj->header.gfx.unk38.curAnim == NULL) {
+        animData->prevValidAnimIndex = 0xFFFF;
+    }
+
+    // Load & set animation
+    if (animIndex != animData->prevValidAnimIndex && time_trials_ghost_load_animation(animData, m, animIndex)) {
+        obj->header.gfx.unk38.curAnim = &animData->animation;
+        obj->header.gfx.unk38.animAccel = 0;
+        obj->header.gfx.unk38.animYTrans = m->unkB0;
+        animData->prevValidAnimIndex = animIndex;
+    }
+
+    // Set frame
+    if (obj->header.gfx.unk38.curAnim != NULL) {
+        obj->header.gfx.unk38.animFrame = MIN(animFrame, obj->header.gfx.unk38.curAnim->unk08 - 1);
+    }
+}
+
+static struct Object *obj_get_time_trials_ghost(const BehaviorScript *behavior) {
+    struct ObjectNode *listHead = &gObjectLists[OBJ_LIST_DEFAULT];
+    struct Object *next = (struct Object *) listHead->next;
+    while (next != (struct Object *) listHead) {
+        if (next->behavior == behavior && next->activeFlags != 0) {
+            return next;
+        }
+        next = (struct Object *) next->header.next;
+    }
+    return NULL;
+}
+
+static void time_trials_update_ghost(struct TimeTrialGhostFrameData *ghostData, struct TimeTrialGhostAnimationData *animData, const BehaviorScript *behavior, struct MarioState *m, s16 frame, s16 level, s16 area) {
+    struct Object *ghost = obj_get_time_trials_ghost(behavior);
+
+    // If timer reached its max or frame data is ended, unload the ghost
+    if (frame >= TIME_TRIALS_MAX_ALLOWED_TIME || time_trials_is_end_frame(ghostData, frame)) {
+        if (ghost != NULL) {
+            obj_mark_for_deletion(ghost);
+        }
+        return;
+    }
+
+    // Spawn ghost if not loaded
+    if (ghost == NULL) {
+        ghost = spawn_object(m->marioObj, 0, behavior);
+    }
+
+    // Hide ghost if disabled, on first frame or its level or area differs from Mario
+    if (frame == 0 || ghostData[frame].level != (u8) level || ghostData[frame].area != (u8) area) {
+        ghost->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
+        return;
+    }
+
+    // Update ghost
+    ghost->hitboxRadius           = 0;
+    ghost->hitboxHeight           = 0;
+    ghost->oOpacity               = 160;
+    ghost->oPosX                  = (f32) ghostData[frame].posX;
+    ghost->oPosY                  = (f32) ghostData[frame].posY;
+    ghost->oPosZ                  = (f32) ghostData[frame].posZ;
+    ghost->oFaceAnglePitch        = (s16) ghostData[frame].pitch  * 0x100;
+    ghost->oFaceAngleYaw          = (s16) ghostData[frame].yaw    * 0x100;
+    ghost->oFaceAngleRoll         = (s16) ghostData[frame].roll   * 0x100;
+    ghost->oMoveAnglePitch        = (s16) ghostData[frame].pitch  * 0x100;
+    ghost->oMoveAngleYaw          = (s16) ghostData[frame].yaw    * 0x100;
+    ghost->oMoveAngleRoll         = (s16) ghostData[frame].roll   * 0x100;
+    ghost->header.gfx.pos[0]      = (f32) ghostData[frame].posX;
+    ghost->header.gfx.pos[1]      = (f32) ghostData[frame].posY;
+    ghost->header.gfx.pos[2]      = (f32) ghostData[frame].posZ;
+    ghost->header.gfx.angle[0]    = (s16) ghostData[frame].pitch  * 0x100;
+    ghost->header.gfx.angle[1]    = (s16) ghostData[frame].yaw    * 0x100;
+    ghost->header.gfx.angle[2]    = (s16) ghostData[frame].roll   * 0x100;
+    ghost->header.gfx.scale[0]    = (f32) ghostData[frame].scaleX / 100.f;
+    ghost->header.gfx.scale[1]    = (f32) ghostData[frame].scaleY / 100.f;
+    ghost->header.gfx.scale[2]    = (f32) ghostData[frame].scaleZ / 100.f;
+    ghost->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
+    ghost->header.gfx.sharedChild = time_trials_get_ghost_mario_graph_node(animData->color);
+    time_trials_ghost_update_animation(animData, ghost, m, (u16) ghostData[frame].animIndex, (u16) ghostData[frame].animFrame);
+}
+
+static void time_trials_record_ghost(struct MarioState *m, s32 frame) {
+    if (frame < 0 || frame >= TIME_TRIALS_MAX_ALLOWED_TIME) {
+        return;
+    }
+
+    if (m->marioObj && m->marioObj->header.gfx.unk38.curAnim) {
+        sTimeTrialGhostDataW[frame].posX      = (s16) m->marioObj->header.gfx.pos[0];
+        sTimeTrialGhostDataW[frame].posY      = (s16) m->marioObj->header.gfx.pos[1];
+        sTimeTrialGhostDataW[frame].posZ      = (s16) m->marioObj->header.gfx.pos[2];
+        sTimeTrialGhostDataW[frame].pitch     = (s8) (m->marioObj->header.gfx.angle[0] / 0x100);
+        sTimeTrialGhostDataW[frame].yaw       = (s8) (m->marioObj->header.gfx.angle[1] / 0x100);
+        sTimeTrialGhostDataW[frame].roll      = (s8) (m->marioObj->header.gfx.angle[2] / 0x100);
+        sTimeTrialGhostDataW[frame].scaleX    = (u8) MAX(0, MIN(255, m->marioObj->header.gfx.scale[0] * 100.f));
+        sTimeTrialGhostDataW[frame].scaleY    = (u8) MAX(0, MIN(255, m->marioObj->header.gfx.scale[1] * 100.f));
+        sTimeTrialGhostDataW[frame].scaleZ    = (u8) MAX(0, MIN(255, m->marioObj->header.gfx.scale[2] * 100.f));
+        sTimeTrialGhostDataW[frame].animIndex = (u8) time_trials_ghost_retrieve_current_animation_index(m);
+        sTimeTrialGhostDataW[frame].animFrame = (u8) MAX(0, MIN(255, MIN(m->marioObj->header.gfx.unk38.animFrame, m->marioObj->header.gfx.unk38.curAnim->unk08 - 1)));
+        sTimeTrialGhostDataW[frame].level     = (u8) gCurrLevelNum;
+        sTimeTrialGhostDataW[frame].area      = (u8) gCurrAreaIndex;
+    } else if (frame > 0) {
+        sTimeTrialGhostDataW[frame]           = sTimeTrialGhostDataW[frame - 1];
+    }
+}
+
+static void time_trials_ghost_unload(const BehaviorScript *behavior) {
+    struct Object *ghost = obj_get_time_trials_ghost(behavior);
+    if (ghost != NULL) {
+        obj_mark_for_deletion(ghost);
+    }
+}
+
+//
+// SM64 Strings
+//
+
+static u8 *time_trials_to_sm64_string(const char *str) {
+    u8 *str64 = calloc(strlen(str) + 1, sizeof(u8));
+    for (int k = 0;; str++) {
+        if (*str == 0) {                str64[k++] = 0xFF; break; }
+        if (*str >= '0' && *str <= '9') str64[k++] = (u8) (*str - '0' + 0);
+        if (*str >= 'A' && *str <= 'Z') str64[k++] = (u8) (*str - 'A' + 10);
+        if (*str >= 'a' && *str <= 'z') str64[k++] = (u8) (*str - 'a' + 36);
+        if (*str == '\'')               str64[k++] = (u8) (62);
+        if (*str == '.')                str64[k++] = (u8) (63);
+        if (*str == ':')                str64[k++] = (u8) (230);
+        if (*str == ',')                str64[k++] = (u8) (111);
+        if (*str == '-')                str64[k++] = (u8) (159);
+        if (*str == '"')                str64[k++] = (u8) (246);
+        if (*str == '@')                str64[k++] = (u8) (249); // coin
+        if (*str == '_')                str64[k++] = (u8) (253); // empty star
+        if (*str == '+')                str64[k++] = (u8) (250); // star filled
+        if (*str == '*')                str64[k++] = (u8) (251); // x
+        if (*str == ' ')                str64[k++] = (u8) (158); // space
+    }
+    return str64;
+}
+
+//
+// Int to String
+//
+
+static u8 *time_trials_time_to_string(s16 time) {
+    if (time == TIME_TRIALS_UNDEFINED_TIME) {
+        return time_trials_to_sm64_string("-'--\"--");
+    }
+
+    char buffer[32];
+    sprintf(buffer, "%01d'%02d\"%02d", (time / 1800) % 10, (time / 30) % 60, ((time * 10) / 3) % 100);
+    return time_trials_to_sm64_string(buffer);
+}
+
+static u8 *time_trials_course_time_to_string(s32 coursetime) {
+    if (coursetime == TIME_TRIALS_UNDEFINED_TIME) {
+        return time_trials_to_sm64_string("-'--\"--");
+    }
+
+    char buffer[32];
+    sprintf(buffer, "%02d'%02d\"%02d", (coursetime / 1800) % 100, (coursetime / 30) % 60, ((coursetime * 10) / 3) % 100);
+    return time_trials_to_sm64_string(buffer);
+}
+
+static u8 *time_trials_total_time_to_string(s32 totaltime) {
+    if (totaltime == TIME_TRIALS_UNDEFINED_TIME) {
+        return time_trials_to_sm64_string("--:--:--.--");
+    }
+
+    char buffer[32];
+    sprintf(buffer, "%02d:%02d:%02d.%02d", (totaltime / 1080000) % 100, (totaltime / 1800) % 60, (totaltime / 30) % 60, ((totaltime * 10) / 3) % 100);
+    return time_trials_to_sm64_string(buffer);
+}
+
+//
+// Render
+//
+
+extern u8 gDialogCharWidths[256];
+static s16 time_trials_get_string_length(const u8 *str) {
+    s16 length = 0;
+    for (; *str != DIALOG_CHAR_TERMINATOR; ++str) {
+        length += gDialogCharWidths[*str];
+    }
+    return length;
+}
+
+enum { screen_left_edge = 0, screen_center = 1, screen_right_edge = 2 };
+enum { align_left = 0, align_center = 1, align_right = 2 };
+enum { color_white = 0, color_gray, color_yellow };
+static void time_trials_render_string(s16 dx, s16 y, u8 *str, s8 origin, s8 alignment, s8 color) {
+
+    // Compute x position from origin and alignment
+    s16 x = 0;
+    s16 l = time_trials_get_string_length(str);
+    s8 mode = origin * 10 + alignment;
+    switch (mode) {
+        case 00: x = GFX_DIMENSIONS_FROM_LEFT_EDGE (dx);         break; // screen_left_edge, align_left
+        case 01: x = GFX_DIMENSIONS_FROM_LEFT_EDGE (dx - l / 2); break; // screen_left_edge, align_center
+        case 02: x = GFX_DIMENSIONS_FROM_LEFT_EDGE (dx - l);     break; // screen_left_edge, align_right
+        case 10: x = SCREEN_WIDTH / 2 +            (dx);         break; // screen_center, align_left
+        case 11: x = SCREEN_WIDTH / 2 +            (dx - l / 2); break; // screen_center, align_center
+        case 12: x = SCREEN_WIDTH / 2 +            (dx - l);     break; // screen_center, align_right
+        case 20: x = GFX_DIMENSIONS_FROM_RIGHT_EDGE(dx);         break; // screen_right_edge, align_left
+        case 21: x = GFX_DIMENSIONS_FROM_RIGHT_EDGE(dx + l / 2); break; // screen_right_edge, align_center
+        case 22: x = GFX_DIMENSIONS_FROM_RIGHT_EDGE(dx + l);     break; // screen_right_edge, align_right
+    }
+
+    // Render characters
+    static const u8 colors[][3] = {
+        { 0xff, 0xff, 0xff },
+        { 0xa0, 0xa0, 0xa0 },
+        { 0xff, 0xff, 0x00 },
+    };
+    void **fontLUT = (void **) segmented_to_virtual(main_font_lut);
+    gSPDisplayList(gDisplayListHead++, dl_ia_text_begin);
+    gDPSetEnvColor(gDisplayListHead++, colors[color][0], colors[color][1], colors[color][2], gDialogTextAlpha);
+    create_dl_translation_matrix(MENU_MTX_PUSH, x, y, 0);
+    for (u8 *p = str; *p != DIALOG_CHAR_TERMINATOR; ++p) {
+        if (*p != DIALOG_CHAR_SPACE) {
+            void *tex = segmented_to_virtual(fontLUT[*p]);
+            gDPPipeSync(gDisplayListHead++);
+            gDPSetTextureImage(gDisplayListHead++, G_IM_FMT_IA, G_IM_SIZ_16b, 1, VIRTUAL_TO_PHYSICAL(tex));
+            gSPDisplayList(gDisplayListHead++, dl_ia_text_tex_settings);
+        }
+        create_dl_translation_matrix(MENU_MTX_NOPUSH, gDialogCharWidths[*p], 0, 0);
+    }
+    gSPPopMatrix(gDisplayListHead++, G_MTX_MODELVIEW);
+    gDPSetEnvColor(gDisplayListHead++, 255, 255, 255, 255);
+    gSPDisplayList(gDisplayListHead++, dl_ia_text_end);
+
+    // Free the string after rendering it
+    free(str);
+}
+
+static void time_trials_render_centered_box(s32 y, s32 w, s32 h) {
+    Mtx *matrix = (Mtx *) alloc_display_list(sizeof(Mtx));
+    if (!matrix) return;
+    create_dl_translation_matrix(MENU_MTX_PUSH, (SCREEN_WIDTH - w) / 2, y + h, 0);
+    guScale(matrix, (f32) w / 130.f, (f32) h / 80.f, 1.f);
+    gSPMatrix(gDisplayListHead++, VIRTUAL_TO_PHYSICAL(matrix), G_MTX_MODELVIEW | G_MTX_MUL | G_MTX_NOPUSH);
+    gDPSetEnvColor(gDisplayListHead++, 0, 0, 0, 105);
+    gSPDisplayList(gDisplayListHead++, dl_draw_text_bg_box);
+    gSPPopMatrix(gDisplayListHead++, G_MTX_MODELVIEW);
+}
+
+/*
+Position:
+Title
+1 5
+2 6
+3 7
+4 8
+C T
+*/
+
+#define TIME_TRIALS_BOX_H_MARGIN    (22.5f * sqr(gfx_current_dimensions.aspect_ratio))
+#define TIME_TRIALS_BOX_V_MARGIN    (40.f)
+#define TIME_TRIALS_TEXT_H_MARGIN   (9.f * gfx_current_dimensions.aspect_ratio)
+#define TIME_TRIALS_TEXT_V_MARGIN   (12.f)
+
+struct RenderParams { const char *label; bool starGet; s16 time; };
+static const struct RenderParams sNoParam = { NULL, 0, 0 };
+
+static void time_trials_render_pause_times(struct RenderParams params[8], const char *title, s32 courseTime, s32 totalTime) {
+
+    // Title
+    time_trials_render_string(0, SCREEN_HEIGHT - TIME_TRIALS_BOX_V_MARGIN - TIME_TRIALS_TEXT_V_MARGIN - 14, time_trials_to_sm64_string(title), screen_center, align_center, color_white);
+
+    // Stars
+    for (s32 i = 0; i != 8; ++i) {
+        if (params[i].label == NULL) continue;
+        s16 dx, y = (SCREEN_HEIGHT / 2) + ((TIME_TRIALS_TEXT_V_MARGIN / 2) + 10 + TIME_TRIALS_TEXT_V_MARGIN) - (10 + TIME_TRIALS_TEXT_V_MARGIN) * (i % 4) - 3;
+        u8 color = ((strcmp(params[i].label, "ALL STARS") == 0) ? color_yellow : color_white);
+
+        // Label
+        dx = TIME_TRIALS_TEXT_H_MARGIN + (i < 4 ? TIME_TRIALS_BOX_H_MARGIN : 0);
+        time_trials_render_string(dx, y, time_trials_to_sm64_string(params[i].label), (i < 4 ? screen_left_edge : screen_center), align_left, color);
+
+        // Time
+        bool undefined = (params[i].time == TIME_TRIALS_UNDEFINED_TIME);
+        dx = (TIME_TRIALS_TEXT_H_MARGIN + (i < 4 ? 0 : TIME_TRIALS_BOX_H_MARGIN)) * (i < 4 ? -1 : +1);
+        time_trials_render_string(dx, y, time_trials_time_to_string(params[i].time), (i < 4 ? screen_center : screen_right_edge), align_right, undefined ? color_gray : color);
+
+        // Star icon
+        bool collected = (params[i].starGet);
+        dx = (TIME_TRIALS_TEXT_H_MARGIN + (i < 4 ? 0 : TIME_TRIALS_BOX_H_MARGIN) + 48) * (i < 4 ? -1 : +1);
+        time_trials_render_string(dx, y, time_trials_to_sm64_string(params[i].starGet ? "+" : "_"), (i < 4 ? screen_center : screen_right_edge), align_right, collected ? color : color_gray);
+    }
+
+    // Course time
+    {
+        bool undefined = (courseTime == TIME_TRIALS_UNDEFINED_TIME);
+        time_trials_render_string(TIME_TRIALS_TEXT_H_MARGIN + TIME_TRIALS_BOX_H_MARGIN, TIME_TRIALS_BOX_V_MARGIN + TIME_TRIALS_TEXT_V_MARGIN - 3, time_trials_to_sm64_string("COURSE"), screen_left_edge, align_left, color_white);
+        time_trials_render_string(-TIME_TRIALS_TEXT_H_MARGIN, TIME_TRIALS_BOX_V_MARGIN + TIME_TRIALS_TEXT_V_MARGIN - 3, time_trials_course_time_to_string(courseTime), screen_center, align_right, undefined ? color_gray : color_white);
+    }
+    
+    // Total time
+    {
+        bool undefined = (totalTime == TIME_TRIALS_UNDEFINED_TIME);
+        time_trials_render_string(TIME_TRIALS_TEXT_H_MARGIN, TIME_TRIALS_BOX_V_MARGIN + TIME_TRIALS_TEXT_V_MARGIN - 3, time_trials_to_sm64_string("TOTAL"), screen_center, align_left, color_white);
+        time_trials_render_string(TIME_TRIALS_TEXT_H_MARGIN + TIME_TRIALS_BOX_H_MARGIN, TIME_TRIALS_BOX_V_MARGIN + TIME_TRIALS_TEXT_V_MARGIN - 3, time_trials_total_time_to_string(totalTime), screen_right_edge, align_right, undefined ? color_gray : color_white);
+    }
+}
+
+static void time_trials_render_pause_course_times(s32 fileIndex, s32 courseNum) {
+    static const char *sCourseNames[] = {
+        "1 - BOB-OMB BATTLEFIELD",
+        "2 - WHOMP FORTRESS",
+        "3 - JOLLY ROGER BAY",
+        "4 - COOL, COOL MOUNTAIN",
+        "5 - BIG BOO'S HAUNT",
+        "6 - HAZY MAZE CAVE",
+        "7 - LETHAL LAVA LAND",
+        "8 - SHIFTING SAND LAND",
+        "9 - DIRE, DIRE DOCKS",
+        "10 - SNOWMAN'S LAND",
+        "11 - WET-DRY WORLD",
+        "12 - TALL, TALL MOUNTAIN",
+        "13 - TINY-HUGE ISLAND",
+        "14 - TICK TOCK CLOCK",
+        "15 - RAINBOW RIDE"
+    };
+
+    u8 starFlags = save_file_get_star_flags(fileIndex, courseNum - COURSE_MIN);
+    u8 allStars  = time_trials_get_time(fileIndex, courseNum, 7) != TIME_TRIALS_UNDEFINED_TIME;
+
+    time_trials_render_pause_times((struct RenderParams[]) {
+        (struct RenderParams) { "STAR 1",    (starFlags >> 0) & 1, time_trials_get_time(fileIndex, courseNum, 0) }, 
+        (struct RenderParams) { "STAR 2",    (starFlags >> 1) & 1, time_trials_get_time(fileIndex, courseNum, 1) },
+        (struct RenderParams) { "STAR 3",    (starFlags >> 2) & 1, time_trials_get_time(fileIndex, courseNum, 2) },
+        OMM_STARS_NON_STOP ?
+        (struct RenderParams) { "ALL STARS", (allStars)      != 0, time_trials_get_time(fileIndex, courseNum, 7) } :
+        sNoParam,
+        (struct RenderParams) { "STAR 4",    (starFlags >> 3) & 1, time_trials_get_time(fileIndex, courseNum, 3) },
+        (struct RenderParams) { "STAR 5",    (starFlags >> 4) & 1, time_trials_get_time(fileIndex, courseNum, 4) },
+        (struct RenderParams) { "STAR 6",    (starFlags >> 5) & 1, time_trials_get_time(fileIndex, courseNum, 5) },
+        (struct RenderParams) { "STAR @",    (starFlags >> 6) & 1, time_trials_get_time(fileIndex, courseNum, 6) },
+    },
+        sCourseNames[courseNum - COURSE_MIN],
+        time_trials_get_course_time(fileIndex, courseNum),
+        time_trials_get_total_time(fileIndex)
+    );
+}
+
+static void time_trials_render_pause_bowser_times(s32 fileIndex) {
+    u8 bitdwStarFlags = save_file_get_star_flags(fileIndex, COURSE_BITDW - COURSE_MIN);
+    u8 bitfsStarFlags = save_file_get_star_flags(fileIndex, COURSE_BITFS - COURSE_MIN);
+    u8 bitsStarFlags  = save_file_get_star_flags(fileIndex, COURSE_BITS - COURSE_MIN);
+    u8 bitdwKeyFlag   = save_file_get_flags() & (SAVE_FLAG_HAVE_KEY_1 | SAVE_FLAG_UNLOCKED_BASEMENT_DOOR);
+    u8 bitfsKeyFlag   = save_file_get_flags() & (SAVE_FLAG_HAVE_KEY_2 | SAVE_FLAG_UNLOCKED_UPSTAIRS_DOOR);
+    u8 bitsGrandStar  = time_trials_get_time(fileIndex, COURSE_BITS, 1) != TIME_TRIALS_UNDEFINED_TIME;
+
+    time_trials_render_pause_times((struct RenderParams[]) {
+        (struct RenderParams) { "STAR 1", (bitdwStarFlags >> 0) & 1, time_trials_get_time(fileIndex, COURSE_BITDW, 0) }, 
+        (struct RenderParams) { "STAR 2", (bitfsStarFlags >> 0) & 1, time_trials_get_time(fileIndex, COURSE_BITFS, 0) },
+        (struct RenderParams) { "STAR 3", (bitsStarFlags  >> 0) & 1, time_trials_get_time(fileIndex, COURSE_BITS,  0) },
+        sNoParam,
+        (struct RenderParams) { "KEY 1",  (bitdwKeyFlag)       != 0, time_trials_get_time(fileIndex, COURSE_BITDW, 1) },
+        (struct RenderParams) { "KEY 2",  (bitfsKeyFlag)       != 0, time_trials_get_time(fileIndex, COURSE_BITFS, 1) },
+        (struct RenderParams) { "FINAL",  (bitsGrandStar)      != 0, time_trials_get_time(fileIndex, COURSE_BITS,  1) },
+        sNoParam,
+    },
+        "BOWSER COURSES",
+        time_trials_get_bowser_time(fileIndex),
+        time_trials_get_total_time(fileIndex)
+    );
+}
+
+static void time_trials_render_pause_secret_times(s32 fileIndex) {
+    u8 totwcStarFlags = save_file_get_star_flags(fileIndex, COURSE_TOTWC - COURSE_MIN);
+    u8 vcutmStarFlags = save_file_get_star_flags(fileIndex, COURSE_VCUTM - COURSE_MIN);
+    u8 cotmcStarFlags = save_file_get_star_flags(fileIndex, COURSE_COTMC - COURSE_MIN);
+    u8 pssStarFlags   = save_file_get_star_flags(fileIndex, COURSE_PSS - COURSE_MIN);
+    u8 saStarFlags    = save_file_get_star_flags(fileIndex, COURSE_SA - COURSE_MIN);
+    u8 wmotrStarFlags = save_file_get_star_flags(fileIndex, COURSE_WMOTR - COURSE_MIN);
+
+    time_trials_render_pause_times((struct RenderParams[]) {
+        (struct RenderParams) { "PSS 1",  (pssStarFlags   >> 0) & 1, time_trials_get_time(fileIndex, COURSE_PSS,   0) },
+        (struct RenderParams) { "PSS 2",  (pssStarFlags   >> 1) & 1, time_trials_get_time(fileIndex, COURSE_PSS,   1) },
+        (struct RenderParams) { "SA",     (saStarFlags    >> 0) & 1, time_trials_get_time(fileIndex, COURSE_SA,    0) },
+        (struct RenderParams) { "WMOTR",  (wmotrStarFlags >> 0) & 1, time_trials_get_time(fileIndex, COURSE_WMOTR, 0) },
+        (struct RenderParams) { "TOTWC",  (totwcStarFlags >> 0) & 1, time_trials_get_time(fileIndex, COURSE_TOTWC, 0) }, 
+        (struct RenderParams) { "VCUTM",  (vcutmStarFlags >> 0) & 1, time_trials_get_time(fileIndex, COURSE_VCUTM, 0) },
+        (struct RenderParams) { "COTMC",  (cotmcStarFlags >> 0) & 1, time_trials_get_time(fileIndex, COURSE_COTMC, 0) },
+        sNoParam,
+    },
+        "SECRET COURSES",
+        time_trials_get_secret_time(fileIndex),
+        time_trials_get_total_time(fileIndex)
+    );
+}
+
+Gfx *gTimeTableDisplayListHead;
+static bool sSetIndexToCurrentCourse = false;
+extern void create_dl_rotation_matrix(s8 pushOp, f32 a, f32 x, f32 y, f32 z);
+bool time_trials_render_time_table(s8 *index) {
+    if (!sTimeTrialsEnabled) {
+        return false;
+    }
+
+    // Handle menu scrolling
+    static s8 sCastleHubCurrentCourse = 0;
+    if (sSetIndexToCurrentCourse) {
+        if (gCurrCourseNum == COURSE_NONE) *index = sCastleHubCurrentCourse;
+        else if (gCurrCourseNum >= COURSE_BITDW && gCurrCourseNum <= COURSE_BITS) *index = COURSE_STAGES_COUNT;
+        else if (gCurrCourseNum > COURSE_BITS) *index = COURSE_STAGES_COUNT + 1;
+        else *index = gCurrCourseNum - 1;
+        sSetIndexToCurrentCourse = false;
+    }
+    handle_menu_scrolling(MENU_SCROLL_VERTICAL, index, -1, COURSE_STAGES_COUNT + 2);
+    if (*index == COURSE_STAGES_COUNT + 2) *index = 0;
+    if (*index == -1) *index = COURSE_STAGES_COUNT + 1;
+    sCastleHubCurrentCourse = *index;
+
+    // Render the colorful "PAUSE"
+    gDisplayListHead = gTimeTableDisplayListHead;
+    u8 *pause = time_trials_to_sm64_string("TIME TRIALS");
+    gSPDisplayList(gDisplayListHead++, dl_rgba16_text_begin);
+    gDPSetEnvColor(gDisplayListHead++, 255, 255, 255, gDialogTextAlpha);
+    print_hud_lut_string(HUD_LUT_GLOBAL, SCREEN_WIDTH / 2 - 64, 8, pause);
+    gSPDisplayList(gDisplayListHead++, dl_rgba16_text_end);
+    free(pause);
+
+    // Render the black box behind the text
+    time_trials_render_centered_box(TIME_TRIALS_BOX_V_MARGIN, GFX_DIMENSIONS_FROM_RIGHT_EDGE(TIME_TRIALS_BOX_H_MARGIN) - GFX_DIMENSIONS_FROM_LEFT_EDGE(TIME_TRIALS_BOX_H_MARGIN), SCREEN_HEIGHT - 2 * TIME_TRIALS_BOX_V_MARGIN);
+    create_dl_translation_matrix(MENU_MTX_PUSH, SCREEN_WIDTH / 2 + 8, SCREEN_HEIGHT - TIME_TRIALS_BOX_V_MARGIN + 4, 0);
+    create_dl_rotation_matrix(MENU_MTX_NOPUSH, 90.0f, 0, 0, 1.0f);
+    gDPSetEnvColor(gDisplayListHead++, 255, 255, 255, gDialogTextAlpha);
+    gSPDisplayList(gDisplayListHead++, dl_draw_triangle);
+    gSPPopMatrix(gDisplayListHead++, G_MTX_MODELVIEW);
+    create_dl_translation_matrix(MENU_MTX_PUSH, SCREEN_WIDTH / 2 - 8, TIME_TRIALS_BOX_V_MARGIN - 4, 0);
+    create_dl_rotation_matrix(MENU_MTX_NOPUSH, 270.0f, 0, 0, 1.0f);
+    gSPDisplayList(gDisplayListHead++, dl_draw_triangle);
+    gSPPopMatrix(gDisplayListHead++, G_MTX_MODELVIEW);
+
+    // Render the text
+    gSPDisplayList(gDisplayListHead++, dl_ia_text_begin);
+    gDPSetEnvColor(gDisplayListHead++, 255, 255, 255, gDialogTextAlpha);
+    switch (*index) {
+        case COURSE_STAGES_COUNT + 1: time_trials_render_pause_secret_times(gCurrSaveFileNum - 1); break;
+        case COURSE_STAGES_COUNT:     time_trials_render_pause_bowser_times(gCurrSaveFileNum - 1); break;
+        default:                      time_trials_render_pause_course_times(gCurrSaveFileNum - 1, *index + 1); break;
+    }
+    gSPDisplayList(gDisplayListHead++, dl_ia_text_end);
+    return true;
+}
+
+//
+// HUD
+//
+
+static s16 time_trials_get_x_from_center(const u8 *str64) {
+    s16 len = 0;
+    while (*str64 != 0xFF) {
+        len += (*str64 == GLOBAL_CHAR_SPACE ? 8 : 12);
+        str64++;
+    }
+    return (SCREEN_WIDTH / 2) - len;
+}
+
+static void time_trials_render_timer(s16 y, const char *text, s16 time, u8 colorFade) {
+    u8 *s = time_trials_to_sm64_string(text);
+    s16 x = time_trials_get_x_from_center(s);
+    gSPDisplayList(gDisplayListHead++, dl_rgba16_text_begin);
+    gDPSetEnvColor(gDisplayListHead++, colorFade, colorFade, colorFade, 255);
+    print_hud_lut_string(HUD_LUT_GLOBAL,                x -  6, y,     s);
+    print_hud_lut_string(HUD_LUT_GLOBAL, SCREEN_WIDTH / 2 +  6, y,     time_trials_int_to_sm64_string( (time / 1800)    % 60,  "%01d"));
+    print_hud_lut_string(HUD_LUT_GLOBAL, SCREEN_WIDTH / 2 + 26, y,     time_trials_int_to_sm64_string( (time / 30)      % 60,  "%02d"));
+    print_hud_lut_string(HUD_LUT_GLOBAL, SCREEN_WIDTH / 2 + 60, y,     time_trials_int_to_sm64_string(((time * 10) / 3) % 100, "%02d"));
+    print_hud_lut_string(HUD_LUT_GLOBAL, SCREEN_WIDTH / 2 + 16, y - 8, (const u8 *) (const u8 []) { 56, 255 });
+    print_hud_lut_string(HUD_LUT_GLOBAL, SCREEN_WIDTH / 2 + 51, y - 8, (const u8 *) (const u8 []) { 57, 255 });
+    gSPDisplayList(gDisplayListHead++, dl_rgba16_text_end);
+    gDPSetEnvColor(gDisplayListHead++, 255, 255, 255, 255);
+    free(s);
+}
+
+void time_trials_render_star_select_time(s32 starIndex) {
+    if (sTimeTrialsEnabled) {
+        s16 time = time_trials_get_time(gCurrSaveFileNum - 1, gCurrCourseNum, starIndex);
+        if (time != TIME_TRIALS_UNDEFINED_TIME) {
+            time_trials_render_timer(12, "HI SCORE", time, 255);
+        }
+    }
+}
+
+//
+// Update
+//
+
+static s32 time_trials_get_ghost_data_to_load(s32 courseNum, s32 starIndex) {
+    if (courseNum >= COURSE_BOB   && courseNum <= COURSE_RR)   return MAX(0, MIN(starIndex, 5));
+    if (courseNum >= COURSE_BITDW && courseNum <= COURSE_BITS) return 1;
+    if (courseNum == COURSE_PSS)                               return 0;
+    return 0;
+}
+
+static s32 time_trials_get_special_ghost_data_to_load(s32 courseNum) {
+    if (courseNum >= COURSE_BOB   && courseNum <= COURSE_RR)   return 6;
+    if (courseNum >= COURSE_BITDW && courseNum <= COURSE_BITS) return 0;
+    if (courseNum == COURSE_PSS)                               return 1;
+    return -1;
+}
+
+static bool time_trials_should_start_timer(struct MarioState *m) {
+    switch (m->action) {
+        case ACT_SPAWN_SPIN_AIRBORNE:       return (gCurrCourseNum >= COURSE_BOB && gCurrCourseNum <= COURSE_STAGES_MAX);
+        case ACT_SPAWN_NO_SPIN_AIRBORNE:    return (gCurrCourseNum >  COURSE_STAGES_MAX);
+        case ACT_FLYING:                    return (gCurrCourseNum == COURSE_TOTWC && m->actionArg == 2 && m->actionTimer++ == 0);
+        case ACT_WATER_IDLE:                return (gCurrCourseNum == COURSE_SA && m->actionArg == 1 && m->actionTimer++ == 0);
+    }
+    return false;
+}
+
+void time_trials_update(bool isPaused) {
+    
+    // Hold L and press B to enable/disable Time Trials during the pause
+    if (isPaused) {
+        if ((gControllers[0].buttonDown & L_TRIG) && (gControllers[0].buttonPressed & B_BUTTON)) {
+            sTimeTrialsEnabled = !sTimeTrialsEnabled;
+            if (sTimeTrialsEnabled) {
+                play_sound(SOUND_MENU_STAR_SOUND, gDefaultSoundArgs);
+            }
+        }
+    }
+    if (!sTimeTrialsEnabled) {
+        sTimeTrialTimer = TIME_TRIALS_MAX_ALLOWED_TIME;
+        sTimeTrialTimerState = TT_TIMER_DISABLED;
+        time_trials_ghost_unload(bhvTimeTrialGhost1);
+        time_trials_ghost_unload(bhvTimeTrialGhost2);
+        return;
+    }
+
+    // Pause
+    static bool sIsPaused = false;
+    if (isPaused && !sIsPaused) {
+        sSetIndexToCurrentCourse = true;
+    }
+    sIsPaused = isPaused;
+
+    // Update running ghost, record ghost data, and advance timer if it's running
+    if (sTimeTrialTimerState == TT_TIMER_RUNNING) {
+        sTimeTrialHiScore = false;
+            
+        // Update ghosts and advance timer if not paused
+        if (!isPaused) {
+            time_trials_update_ghost(sTimeTrialGhostDataR1, &sGhostAnimData1, bhvTimeTrialGhost1, gMarioState, sTimeTrialTimer, gCurrLevelNum, gCurrAreaIndex);
+            time_trials_update_ghost(sTimeTrialGhostDataR2, &sGhostAnimData2, bhvTimeTrialGhost2, gMarioState, sTimeTrialTimer, gCurrLevelNum, gCurrAreaIndex);
+            time_trials_record_ghost(gMarioState, sTimeTrialTimer);
+            sTimeTrialTimer = MIN(sTimeTrialTimer + 1, TIME_TRIALS_MAX_ALLOWED_TIME);
+        }
+    }
+
+    // Runs timer if course is TTable
+    static s16 sLoadedSvFileNum = -1;
+    static s16 sLoadedCourseNum = -1;
+    static s16 sLoadedStarIndex = -1;
+    if (time_trials_get_slot_index(gCurrCourseNum, 0) != -1) {
+        if (sTimeTrialTimerState != TT_TIMER_STOPPED) {
+            sTimeTrialTimerState = TT_TIMER_RUNNING;
+            sTimeTrialHiScore = false;
+
+            // Start timer and init ghost if a course entry is detected
+            if (time_trials_should_start_timer(gMarioState)) {
+                bzero(sTimeTrialGhostDataW, sizeof(sTimeTrialGhostDataW));
+                sTimeTrialTimer = 0;
+
+                // Load ghosts only if not already loaded
+                s32 starIndex = time_trials_get_ghost_data_to_load(gCurrCourseNum, gCurrActNum - 1);
+                if ((sLoadedSvFileNum != gCurrSaveFileNum) || (sLoadedCourseNum != gCurrCourseNum) || (sLoadedStarIndex != starIndex)) {
+
+                    // Default ghost (blue)
+                    // All Stars ghost (pink)
+                    if (OMM_STARS_NON_STOP && gCurrCourseNum >= COURSE_BOB && gCurrCourseNum <= COURSE_RR) {
+                        starIndex = 7;
+                    }
+                    s32 slotIndex = time_trials_get_slot_index(gCurrCourseNum, starIndex);
+                    time_trials_read_ghost_data(gCurrSaveFileNum - 1, gCurrCourseNum - 1, starIndex, slotIndex, sTimeTrialGhostDataR1);
+                    sGhostAnimData1.color = (starIndex == 7 ? GHOST_MARIO_ALL_STARS : GHOST_MARIO_DEFAULT);
+                    sGhostAnimData1.prevValidAnimIndex = 0xFFFF;
+
+                    // Special ghost
+                    // Bowser Red coins (red)
+                    // PSS 2 (green)
+                    // 100 coins (gold)
+                    s32 specialIndex = time_trials_get_special_ghost_data_to_load(gCurrCourseNum);
+                    if (specialIndex != -1) {
+                        slotIndex = time_trials_get_slot_index(gCurrCourseNum, specialIndex);
+                        time_trials_read_ghost_data(gCurrSaveFileNum - 1, gCurrCourseNum - 1, specialIndex, slotIndex, sTimeTrialGhostDataR2);
+                        if (specialIndex == 0) sGhostAnimData2.color = GHOST_MARIO_RED_COINS;
+                        if (specialIndex == 1) sGhostAnimData2.color = GHOST_MARIO_PSS_2;
+                        if (specialIndex == 6) sGhostAnimData2.color = GHOST_MARIO_100_COINS;
+                        sGhostAnimData2.prevValidAnimIndex = 0xFFFF;
+                    }
+
+                    sLoadedSvFileNum = gCurrSaveFileNum;
+                    sLoadedCourseNum = gCurrCourseNum;
+                    sLoadedStarIndex = starIndex;
+                }
+            }
+
+            // Stop timer and save time when Mario collects a star
+            struct MarioState *m = gMarioState;
+            if (m->action == ACT_STAR_DANCE_EXIT ||
+                m->action == ACT_STAR_DANCE_NO_EXIT ||
+                m->action == ACT_STAR_DANCE_WATER ||
+                m->action == ACT_FALL_AFTER_STAR_GRAB ||
+                m->action == ACT_JUMBO_STAR_CUTSCENE) {
+
+                // Force Mario to leave the course if he collects a main course star
+                // Ignore this if OMM Non-Stop mode is enabled
+                if (gCurrCourseNum >= COURSE_MIN && gCurrCourseNum <= COURSE_STAGES_MAX) {
+                    if (!OMM_STARS_NON_STOP || OMM_ALL_STARS) {
+                        drop_queued_background_music();
+                        fadeout_level_music(126);
+                        m->actionArg = 0;
+                    }
+                }
+
+                // Save the time
+                if (sTimeTrialTimerState == TT_TIMER_RUNNING) {
+                    s32 starIndex = gLastCompletedStarNum - 1;
+
+                    // Bowser Key or Grand Star
+                    if (gCurrLevelNum == LEVEL_BOWSER_1 ||
+                        gCurrLevelNum == LEVEL_BOWSER_2 ||
+                        gCurrLevelNum == LEVEL_BOWSER_3) {
+                        starIndex = 1;
+                        m->actionArg = 0;
+                    }
+
+                    // Write time and ghost data if new record
+                    s32 slotIndex = time_trials_get_slot_index(gCurrCourseNum, starIndex);
+                    if (slotIndex != -1) {
+                        s16 t = *time_trials_time(gCurrSaveFileNum - 1, slotIndex);
+                        if (t == TIME_TRIALS_UNDEFINED_TIME || t > sTimeTrialTimer) {
+                            time_trials_write_ghost_data(gCurrSaveFileNum - 1, gCurrCourseNum - 1, starIndex);
+                            sTimeTrialHiScore = true;
+                        } else {
+                            sTimeTrialHiScore = false;
+                        }
+                    }
+
+                    // All Stars
+                    if (OMM_ALL_STARS) {
+                        slotIndex = time_trials_get_slot_index(gCurrCourseNum, 7);
+                        if (slotIndex != -1) {
+                            s16 t = *time_trials_time(gCurrSaveFileNum - 1, slotIndex);
+                            if (t == TIME_TRIALS_UNDEFINED_TIME || t > sTimeTrialTimer) {
+                                time_trials_write_ghost_data(gCurrSaveFileNum - 1, gCurrCourseNum - 1, 7);
+                                sTimeTrialHiScore = true;
+                            } else {
+                                sTimeTrialHiScore = false;
+                            }
+                        }
+                    }
+
+                    // Stop the timer if Mario leaves the course
+                    if (m->actionArg == 0) {
+                        sTimeTrialTimerState = TT_TIMER_STOPPED;
+                    }
+                }
+            }
+        }
+    } else {
+        sTimeTrialTimer = TIME_TRIALS_MAX_ALLOWED_TIME;
+        sTimeTrialTimerState = TT_TIMER_DISABLED;
+        sLoadedSvFileNum = -1;
+        sLoadedCourseNum = -1;
+        sLoadedStarIndex = -1;
+    }
+
+    // Render timer
+    if (gHudDisplay.flags != HUD_DISPLAY_NONE && configHUD && sTimeTrialTimerState != TT_TIMER_DISABLED) {
+        if (sTimeTrialHiScore && sTimeTrialTimerState == TT_TIMER_STOPPED) {
+            time_trials_render_timer(SCREEN_HEIGHT - 24, "HI SCORE", sTimeTrialTimer, (sins(gGlobalTimer * 0x1000) * 50.f + 205.f));
+        } else if (sTimeTrialTimer > 0) {
+            time_trials_render_timer(SCREEN_HEIGHT - 24, "TIME", sTimeTrialTimer, 255);
+        }
+    }
+}
diff --git a/src/game/time_trials.h b/src/game/time_trials.h
new file mode 100644
index 0000000..6998c62
--- /dev/null
+++ b/src/game/time_trials.h
@@ -0,0 +1,15 @@
+#ifndef TIME_TRIALS_H
+#define TIME_TRIALS_H
+
+#include <stdbool.h>
+#include "types.h"
+
+#define TIME_TRIALS time_trials_enabled()
+
+extern Gfx *gTimeTableDisplayListHead;
+bool time_trials_enabled();
+void time_trials_update(bool isPaused);
+bool time_trials_render_time_table(s8 *index);
+void time_trials_render_star_select_time(s32 starIndex);
+
+#endif // TIME_TRIALS_H
diff --git a/src/game/time_trials_ghost_geo.inl b/src/game/time_trials_ghost_geo.inl
new file mode 100644
index 0000000..b0b4871
--- /dev/null
+++ b/src/game/time_trials_ghost_geo.inl
@@ -0,0 +1,1931 @@
+//
+// Ghost Mario
+//
+
+static const Lights1 ghost_mario_blue_light  = gdSPDefLights1(0x20, 0x20, 0xA0, 0x20, 0x20, 0xA0, 0x28, 0x28, 0x28);
+static const Lights1 ghost_mario_red_light   = gdSPDefLights1(0x80, 0x20, 0x20, 0x80, 0x20, 0x20, 0x28, 0x28, 0x28);
+static const Lights1 ghost_mario_green_light = gdSPDefLights1(0x20, 0x60, 0x20, 0x20, 0x60, 0x20, 0x28, 0x28, 0x28);
+static const Lights1 ghost_mario_gold_light  = gdSPDefLights1(0xA0, 0x80, 0x00, 0xA0, 0x80, 0x00, 0x28, 0x28, 0x28);
+static const Lights1 ghost_mario_pink_light  = gdSPDefLights1(0xC0, 0x40, 0xA0, 0xC0, 0x40, 0xA0, 0x28, 0x28, 0x28);
+
+//
+// Ghost light display list
+//
+
+static const Gfx ghost_mario_blue_light_dl[] = {
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+    gsSPLight(&ghost_mario_blue_light.l, 1),
+    gsSPLight(&ghost_mario_blue_light.a, 2),
+    gsSPEndDisplayList(),
+};
+
+static const Gfx ghost_mario_red_light_dl[] = {
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+    gsSPLight(&ghost_mario_red_light.l, 1),
+    gsSPLight(&ghost_mario_red_light.a, 2),
+    gsSPEndDisplayList(),
+};
+
+static const Gfx ghost_mario_green_light_dl[] = {
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+    gsSPLight(&ghost_mario_green_light.l, 1),
+    gsSPLight(&ghost_mario_green_light.a, 2),
+    gsSPEndDisplayList(),
+};
+
+static const Gfx ghost_mario_gold_light_dl[] = {
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+    gsSPLight(&ghost_mario_gold_light.l, 1),
+    gsSPLight(&ghost_mario_gold_light.a, 2),
+    gsSPEndDisplayList(),
+};
+
+static const Gfx ghost_mario_pink_light_dl[] = {
+    gsDPPipeSync(),
+    gsDPSetCombineLERP(0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT, 0, 0, 0, SHADE, 0, 0, 0, ENVIRONMENT),
+    gsSPLight(&ghost_mario_pink_light.l, 1),
+    gsSPLight(&ghost_mario_pink_light.a, 2),
+    gsSPEndDisplayList(),
+};
+
+//
+// Mario's butt
+//
+
+static const Vtx ghost_mario_butt_dl_vertex_group1[] = {
+    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
+    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
+    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
+    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group2[] = {
+    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
+    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
+    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+    {{{   -17,     32,    -79}, 0, {     0,      0}, {0xa4, 0x23, 0xb1, 0x00}}},
+    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group3[] = {
+    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
+    {{{    -9,    -69,     55}, 0, {     0,      0}, {0xcd, 0x97, 0x30, 0x00}}},
+    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
+    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
+    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group4[] = {
+    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
+    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
+    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
+    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
+    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group5[] = {
+    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
+    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+    {{{    52,     70,    -39}, 0, {     0,      0}, {0x59, 0x56, 0xe5, 0x00}}},
+    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+    {{{    43,     40,     91}, 0, {     0,      0}, {0x4e, 0x30, 0x57, 0x00}}},
+    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group6[] = {
+    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+    {{{    43,     40,    -91}, 0, {     0,      0}, {0x4e, 0x30, 0xa9, 0x00}}},
+    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group7[] = {
+    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+    {{{   -17,     32,    -79}, 0, {     0,      0}, {0xa4, 0x23, 0xb1, 0x00}}},
+    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+    {{{    73,     11,      0}, 0, {     0,      0}, {0x7e, 0x04, 0x00, 0x00}}},
+    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
+    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
+    {{{    44,    -10,    -92}, 0, {     0,      0}, {0x4f, 0xf2, 0x9e, 0x00}}},
+    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group8[] = {
+    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+    {{{    36,    -52,     79}, 0, {     0,      0}, {0x30, 0xb8, 0x5c, 0x00}}},
+    {{{    -9,     73,    -34}, 0, {     0,      0}, {0xc2, 0x6b, 0xe6, 0x00}}},
+    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+    {{{    27,     72,    -63}, 0, {     0,      0}, {0x07, 0x6b, 0xbe, 0x00}}},
+    {{{    27,     72,     63}, 0, {     0,      0}, {0x06, 0x6c, 0x42, 0x00}}},
+    {{{    -5,     59,     72}, 0, {     0,      0}, {0xc0, 0x52, 0x47, 0x00}}},
+    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+    {{{     6,     33,    -95}, 0, {     0,      0}, {0xe6, 0x26, 0x8b, 0x00}}},
+    {{{    -5,     59,    -72}, 0, {     0,      0}, {0xc0, 0x52, 0xb9, 0x00}}},
+    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
+    {{{    52,     70,     38}, 0, {     0,      0}, {0x53, 0x5d, 0x16, 0x00}}},
+    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group9[] = {
+    {{{     4,    -48,    -86}, 0, {     0,      0}, {0xd8, 0xba, 0x9f, 0x00}}},
+    {{{    36,    -51,    -79}, 0, {     0,      0}, {0x30, 0xb8, 0xa4, 0x00}}},
+    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+    {{{   -18,     32,     79}, 0, {     0,      0}, {0xa4, 0x23, 0x4f, 0x00}}},
+    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+    {{{     8,     -8,    -99}, 0, {     0,      0}, {0xf3, 0xee, 0x84, 0x00}}},
+    {{{     7,     33,     95}, 0, {     0,      0}, {0xe6, 0x26, 0x75, 0x00}}},
+    {{{     8,     -8,     99}, 0, {     0,      0}, {0xf3, 0xef, 0x7c, 0x00}}},
+    {{{    44,     -9,     92}, 0, {     0,      0}, {0x4f, 0xf2, 0x62, 0x00}}},
+    {{{    -9,     73,     34}, 0, {     0,      0}, {0xbe, 0x6a, 0x12, 0x00}}},
+    {{{    22,     82,     26}, 0, {     0,      0}, {0x07, 0x7d, 0x11, 0x00}}},
+    {{{    22,     82,    -26}, 0, {     0,      0}, {0x07, 0x7e, 0xf5, 0x00}}},
+    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
+    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+};
+
+static const Vtx ghost_mario_butt_dl_vertex_group10[] = {
+    {{{   -31,    -51,     42}, 0, {     0,      0}, {0x8d, 0xd7, 0x1f, 0x00}}},
+    {{{    -9,    -69,     55}, 0, {     0,      0}, {0xcd, 0x97, 0x30, 0x00}}},
+    {{{     4,    -49,     86}, 0, {     0,      0}, {0xd8, 0xb9, 0x61, 0x00}}},
+    {{{   -20,     -7,     81}, 0, {     0,      0}, {0xa3, 0xf9, 0x55, 0x00}}},
+    {{{   -32,     40,     39}, 0, {     0,      0}, {0x8b, 0x25, 0x1d, 0x00}}},
+    {{{   -32,     40,    -39}, 0, {     0,      0}, {0x89, 0x25, 0xeb, 0x00}}},
+    {{{   -20,     -8,    -81}, 0, {     0,      0}, {0xa3, 0xf8, 0xab, 0x00}}},
+    {{{   -31,    -51,    -42}, 0, {     0,      0}, {0x91, 0xd0, 0xdc, 0x00}}},
+    {{{    55,    -61,     36}, 0, {     0,      0}, {0x60, 0xb3, 0x1a, 0x00}}},
+    {{{    26,    -74,     45}, 0, {     0,      0}, {0x12, 0x88, 0x22, 0x00}}},
+    {{{    26,    -74,    -46}, 0, {     0,      0}, {0x18, 0x88, 0xe2, 0x00}}},
+    {{{   -14,    -74,      0}, 0, {     0,      0}, {0xcb, 0x8d, 0x00, 0x00}}},
+    {{{    -9,    -69,    -55}, 0, {     0,      0}, {0xcd, 0x97, 0xd0, 0x00}}},
+    {{{    55,    -61,    -36}, 0, {     0,      0}, {0x67, 0xbe, 0xe1, 0x00}}},
+};
+
+static const Gfx ghost_mario_butt[] = {
+    gsDPPipeSync(),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group1, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 9, 5, 10, 0x0),
+    gsSP2Triangles(4, 11, 10, 0x0, 12, 13, 14, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group2, 14, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 9, 10, 11, 0x0),
+    gsSP2Triangles(12, 3, 13, 0x0, 6, 8, 12, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group3, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(6, 1, 7, 0x0, 8, 9, 10, 0x0),
+    gsSP2Triangles(11, 9, 12, 0x0, 13, 14, 15, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group4, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(4, 6, 5, 0x0, 7, 8, 2, 0x0),
+    gsSP2Triangles(9, 7, 10, 0x0, 11, 12, 7, 0x0),
+    gsSP1Triangle(13, 11, 14, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group5, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 1, 0, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 2, 7, 8, 0x0),
+    gsSP2Triangles(9, 10, 11, 0x0, 12, 13, 14, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group6, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 9, 10, 7, 0x0),
+    gsSP2Triangles(11, 10, 9, 0x0, 12, 13, 14, 0x0),
+    gsSP1Triangle(0, 13, 12, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group7, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 2, 1, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 7, 2, 3, 0x0),
+    gsSP2Triangles(8, 9, 10, 0x0, 9, 8, 11, 0x0),
+    gsSP2Triangles(11, 12, 13, 0x0, 13, 14, 1, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group8, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 9, 10, 5, 0x0),
+    gsSP2Triangles(4, 11, 12, 0x0, 6, 11, 13, 0x0),
+    gsSP2Triangles(13, 3, 14, 0x0, 15, 2, 1, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group9, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(1, 0, 6, 0x0, 7, 8, 9, 0x0),
+    gsSP2Triangles(10, 11, 12, 0x0, 0, 13, 14, 0x0),
+    gsSP1Triangle(15, 0, 14, 0x0),
+    gsSPVertex(ghost_mario_butt_dl_vertex_group10, 14, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 3, 0, 0x0),
+    gsSP2Triangles(3, 4, 0, 0x0, 0, 4, 5, 0x0),
+    gsSP2Triangles(5, 6, 7, 0x0, 5, 7, 0, 0x0),
+    gsSP2Triangles(8, 9, 10, 0x0, 9, 11, 10, 0x0),
+    gsSP2Triangles(9, 1, 11, 0x0, 11, 12, 10, 0x0),
+    gsSP1Triangle(10, 13, 8, 0x0),
+    gsSPEndDisplayList(),
+};
+
+//
+// Left arm
+//
+
+static const Vtx ghost_mario_left_arm_shared_dl_vertex_group1[] = {
+    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
+    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
+    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
+    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
+    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
+    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
+    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
+    {{{     6,    -13,    -42}, 0, {     0,      0}, {0xd6, 0xde, 0x8e, 0x00}}},
+    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
+    {{{     7,     29,    -26}, 0, {     0,      0}, {0xda, 0x62, 0xbb, 0x00}}},
+    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
+    {{{    -8,     16,     10}, 0, {     0,      0}, {0x9a, 0x44, 0x1d, 0x00}}},
+    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
+    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
+    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_arm_shared_dl_vertex_group2[] = {
+    {{{    68,     13,    -16}, 0, {     0,      0}, {0x6a, 0x38, 0xd9, 0x00}}},
+    {{{    68,    -10,    -25}, 0, {     0,      0}, {0x75, 0xe7, 0xd9, 0x00}}},
+    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
+    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
+    {{{    68,     12,      9}, 0, {     0,      0}, {0x78, 0x1f, 0x1b, 0x00}}},
+    {{{    67,    -12,     16}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
+    {{{    67,    -26,     -5}, 0, {     0,      0}, {0x6e, 0xc2, 0xfe, 0x00}}},
+    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
+    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
+    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
+    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
+    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
+    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_arm_shared_dl_vertex_group3[] = {
+    {{{     5,    -42,     -5}, 0, {     0,      0}, {0xd3, 0x8a, 0xff, 0x00}}},
+    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
+    {{{     6,    -13,    -42}, 0, {     0,      0}, {0xd6, 0xde, 0x8e, 0x00}}},
+    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
+    {{{     7,     29,    -26}, 0, {     0,      0}, {0xda, 0x62, 0xbb, 0x00}}},
+    {{{    -8,     16,     10}, 0, {     0,      0}, {0x9a, 0x44, 0x1d, 0x00}}},
+    {{{     7,     27,     20}, 0, {     0,      0}, {0xda, 0x61, 0x47, 0x00}}},
+    {{{    58,    -13,    -34}, 0, {     0,      0}, {0x3b, 0xfb, 0x90, 0x00}}},
+    {{{    57,    -36,     -5}, 0, {     0,      0}, {0x3e, 0x93, 0xef, 0x00}}},
+    {{{     6,    -16,     32}, 0, {     0,      0}, {0xd5, 0xdc, 0x71, 0x00}}},
+    {{{    58,    -15,     25}, 0, {     0,      0}, {0x32, 0xc6, 0x64, 0x00}}},
+    {{{    59,     20,     15}, 0, {     0,      0}, {0x44, 0x4a, 0x4c, 0x00}}},
+    {{{    59,     21,    -21}, 0, {     0,      0}, {0x37, 0x67, 0xd0, 0x00}}},
+    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_arm_shared_dl_vertex_group4[] = {
+    {{{    68,     12,      9}, 0, {     0,      0}, {0x78, 0x1f, 0x1b, 0x00}}},
+    {{{    68,    -10,    -25}, 0, {     0,      0}, {0x75, 0xe7, 0xd9, 0x00}}},
+    {{{    68,     13,    -16}, 0, {     0,      0}, {0x6a, 0x38, 0xd9, 0x00}}},
+    {{{    67,    -12,     16}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+    {{{    67,    -26,     -5}, 0, {     0,      0}, {0x6e, 0xc2, 0xfe, 0x00}}},
+    {{{    -8,     17,    -17}, 0, {     0,      0}, {0x90, 0x2a, 0xd6, 0x00}}},
+    {{{    -8,     -9,    -27}, 0, {     0,      0}, {0x8e, 0xe8, 0xce, 0x00}}},
+    {{{    -8,    -11,     18}, 0, {     0,      0}, {0x8b, 0xff, 0x2f, 0x00}}},
+    {{{    -9,    -26,     -5}, 0, {     0,      0}, {0x96, 0xbd, 0x0e, 0x00}}},
+};
+
+static const Gfx ghost_mario_left_arm_shared_dl[] = {
+    gsSPVertex(ghost_mario_left_arm_shared_dl_vertex_group1, 15, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+    gsSP2Triangles( 9,  2,  8, 0x0,  9, 10, 11, 0x0),
+    gsSP2Triangles( 7, 12, 10, 0x0,  5, 13, 12, 0x0),
+    gsSP2Triangles( 3, 14, 13, 0x0,  0, 11, 14, 0x0),
+    gsSPVertex(ghost_mario_left_arm_shared_dl_vertex_group2, 15, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+    gsSP2Triangles( 5,  4,  3, 0x0,  6,  7,  5, 0x0),
+    gsSP2Triangles( 1,  7,  6, 0x0,  2,  1,  6, 0x0),
+    gsSP2Triangles( 6,  5,  8, 0x0,  8,  5,  3, 0x0),
+    gsSP2Triangles( 3,  0,  9, 0x0,  9,  0,  2, 0x0),
+    gsSP2Triangles(10, 11, 12, 0x0, 12, 13, 14, 0x0),
+    gsSPVertex(ghost_mario_left_arm_shared_dl_vertex_group3, 14, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  4, 0x0),
+    gsSP2Triangles( 4,  5,  6, 0x0,  2,  4,  7, 0x0),
+    gsSP2Triangles( 0,  2,  8, 0x0,  9,  0, 10, 0x0),
+    gsSP2Triangles( 6,  9, 11, 0x0,  4,  6, 12, 0x0),
+    gsSP1Triangle(13,  5,  3, 0x0),
+    gsSPVertex(ghost_mario_left_arm_shared_dl_vertex_group4, 9, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  0,  3,  1, 0x0),
+    gsSP2Triangles( 3,  4,  1, 0x0,  5,  6,  7, 0x0),
+    gsSP1Triangle( 6,  8,  7, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_left_forearm_shared_dl_vertex[] = {
+    {{{    -2,     19,     16}, 0, {     0,      0}, {0xdb, 0x61, 0x48, 0x00}}},
+    {{{    47,     14,     13}, 0, {     0,      0}, {0x44, 0x44, 0x51, 0x00}}},
+    {{{    47,     16,    -19}, 0, {     0,      0}, {0x45, 0x61, 0xd6, 0x00}}},
+    {{{    -3,    -17,     26}, 0, {     0,      0}, {0xd7, 0xdb, 0x71, 0x00}}},
+    {{{    46,    -17,     22}, 0, {     0,      0}, {0x41, 0xc7, 0x5c, 0x00}}},
+    {{{    -3,    -38,     -4}, 0, {     0,      0}, {0xd4, 0x89, 0xfe, 0x00}}},
+    {{{    45,    -34,     -4}, 0, {     0,      0}, {0x3f, 0x95, 0xe8, 0x00}}},
+    {{{    -3,    -14,    -34}, 0, {     0,      0}, {0xd7, 0xde, 0x8e, 0x00}}},
+    {{{    46,    -14,    -30}, 0, {     0,      0}, {0x42, 0xf4, 0x95, 0x00}}},
+    {{{    -2,     21,    -21}, 0, {     0,      0}, {0xdb, 0x63, 0xbb, 0x00}}},
+    {{{   -14,     13,    -15}, 0, {     0,      0}, {0x93, 0x2c, 0xd3, 0x00}}},
+    {{{   -14,     11,     10}, 0, {     0,      0}, {0x93, 0x3b, 0x19, 0x00}}},
+    {{{   -15,    -11,    -24}, 0, {     0,      0}, {0x9a, 0xde, 0xbe, 0x00}}},
+    {{{   -15,    -27,     -4}, 0, {     0,      0}, {0x8b, 0xd2, 0x0a, 0x00}}},
+    {{{   -15,    -13,     17}, 0, {     0,      0}, {0x9b, 0xfb, 0x4c, 0x00}}},
+    {{{    58,     -7,     -3}, 0, {     0,      0}, {0x7e, 0xfc, 0x00, 0x00}}},
+};
+
+static const Gfx ghost_mario_left_forearm_shared_dl[] = {
+    gsSPVertex(ghost_mario_left_forearm_shared_dl_vertex, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+    gsSP2Triangles( 9,  2,  8, 0x0,  9, 10, 11, 0x0),
+    gsSP2Triangles( 7, 12, 10, 0x0,  5, 13, 12, 0x0),
+    gsSP2Triangles( 3, 14, 13, 0x0,  0, 11, 14, 0x0),
+    gsSP2Triangles( 8, 15,  6, 0x0,  6, 15,  4, 0x0),
+    gsSP2Triangles( 4, 15,  1, 0x0,  1, 15,  2, 0x0),
+    gsSP2Triangles( 2, 15,  8, 0x0,  0, 14,  3, 0x0),
+    gsSP2Triangles( 3, 13,  5, 0x0,  5, 12,  7, 0x0),
+    gsSP2Triangles( 7, 10,  9, 0x0,  9, 11,  0, 0x0),
+    gsSP2Triangles( 7,  9,  8, 0x0,  5,  7,  6, 0x0),
+    gsSP2Triangles( 3,  5,  4, 0x0,  0,  3,  1, 0x0),
+    gsSP2Triangles( 9,  0,  2, 0x0, 12, 13, 10, 0x0),
+    gsSP2Triangles(13, 11, 10, 0x0, 13, 14, 11, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_left_hand_closed_shared_dl_vertex_group1[] = {
+    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
+    {{{    17,     -1,     27}, 0, {     0,      0}, {0x00, 0xfd, 0x7f, 0x00}}},
+    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
+    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
+    {{{     4,     24,    -31}, 0, {     0,      0}, {0xd5, 0x3f, 0x9c, 0x00}}},
+    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
+    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
+    {{{     5,     -6,     36}, 0, {     0,      0}, {0x44, 0x1b, 0x67, 0x00}}},
+    {{{   -10,     26,    -38}, 0, {     0,      0}, {0xf0, 0x41, 0x95, 0x00}}},
+    {{{    17,    -38,    -39}, 0, {     0,      0}, {0x1a, 0xb7, 0x9d, 0x00}}},
+    {{{    86,     29,     41}, 0, {     0,      0}, {0x4b, 0x20, 0x60, 0x00}}},
+    {{{    59,     81,      8}, 0, {     0,      0}, {0x11, 0x7a, 0x1d, 0x00}}},
+    {{{   107,    -26,      4}, 0, {     0,      0}, {0x67, 0xc5, 0x2b, 0x00}}},
+    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
+    {{{    90,     17,    -46}, 0, {     0,      0}, {0x43, 0x35, 0xa3, 0x00}}},
+    {{{   100,     -6,    -46}, 0, {     0,      0}, {0x63, 0x0a, 0xb3, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_hand_closed_shared_dl_vertex_group2[] = {
+    {{{    90,     17,    -46}, 0, {     0,      0}, {0x43, 0x35, 0xa3, 0x00}}},
+    {{{    57,     55,    -37}, 0, {     0,      0}, {0x22, 0x54, 0xa9, 0x00}}},
+    {{{    99,     40,    -16}, 0, {     0,      0}, {0x6c, 0x3c, 0xe5, 0x00}}},
+    {{{    32,     63,    -28}, 0, {     0,      0}, {0xd0, 0x4f, 0xaa, 0x00}}},
+    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
+    {{{    59,     81,      8}, 0, {     0,      0}, {0x11, 0x7a, 0x1d, 0x00}}},
+    {{{    80,    -31,    -61}, 0, {     0,      0}, {0x0c, 0xb2, 0x9d, 0x00}}},
+    {{{   100,     -6,    -46}, 0, {     0,      0}, {0x63, 0x0a, 0xb3, 0x00}}},
+    {{{   107,    -26,      4}, 0, {     0,      0}, {0x67, 0xc5, 0x2b, 0x00}}},
+    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
+    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
+    {{{    86,     29,     41}, 0, {     0,      0}, {0x4b, 0x20, 0x60, 0x00}}},
+    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
+    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_hand_closed_shared_dl_vertex_group3[] = {
+    {{{    27,    -58,      6}, 0, {     0,      0}, {0xa3, 0xad, 0x12, 0x00}}},
+    {{{   -14,    -14,     -4}, 0, {     0,      0}, {0x8c, 0xcd, 0x02, 0x00}}},
+    {{{    17,    -38,    -39}, 0, {     0,      0}, {0x1a, 0xb7, 0x9d, 0x00}}},
+    {{{   -10,     26,    -38}, 0, {     0,      0}, {0xf0, 0x41, 0x95, 0x00}}},
+    {{{   -18,     45,      8}, 0, {     0,      0}, {0x84, 0xf3, 0x13, 0x00}}},
+    {{{     5,     -6,     36}, 0, {     0,      0}, {0x99, 0xd2, 0x38, 0x00}}},
+    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
+    {{{    27,    -58,      6}, 0, {     0,      0}, {0x73, 0xd5, 0x1d, 0x00}}},
+    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
+    {{{   -18,     45,      8}, 0, {     0,      0}, {0x2d, 0x71, 0x21, 0x00}}},
+    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
+    {{{     5,     -6,     36}, 0, {     0,      0}, {0x44, 0x1b, 0x67, 0x00}}},
+    {{{    36,      6,     42}, 0, {     0,      0}, {0xe1, 0xf0, 0x79, 0x00}}},
+    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
+    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_hand_closed_shared_dl_vertex_group4[] = {
+    {{{    26,    -25,    -32}, 0, {     0,      0}, {0x09, 0xc7, 0x8f, 0x00}}},
+    {{{    33,      7,    -44}, 0, {     0,      0}, {0xc6, 0xfe, 0x90, 0x00}}},
+    {{{    80,    -31,    -61}, 0, {     0,      0}, {0x0c, 0xb2, 0x9d, 0x00}}},
+    {{{    58,    -45,      7}, 0, {     0,      0}, {0x01, 0x85, 0x1c, 0x00}}},
+    {{{    34,    -41,      3}, 0, {     0,      0}, {0x42, 0xa3, 0x36, 0x00}}},
+    {{{    61,     12,    -60}, 0, {     0,      0}, {0x00, 0x21, 0x86, 0x00}}},
+    {{{    12,     59,     10}, 0, {     0,      0}, {0xaa, 0x58, 0x1b, 0x00}}},
+    {{{    32,     63,    -28}, 0, {     0,      0}, {0xd0, 0x4f, 0xaa, 0x00}}},
+    {{{     4,     24,    -31}, 0, {     0,      0}, {0xd5, 0x3f, 0x9c, 0x00}}},
+    {{{    -1,     39,      5}, 0, {     0,      0}, {0xea, 0x6e, 0x3a, 0x00}}},
+};
+
+static const Gfx ghost_mario_left_hand_closed_shared_dl[] = {
+    gsSPVertex(ghost_mario_left_hand_closed_shared_dl_vertex_group1, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+    gsSP2Triangles( 6,  1,  0, 0x0,  2,  1,  7, 0x0),
+    gsSP2Triangles( 7,  1,  6, 0x0,  6,  4,  8, 0x0),
+    gsSP2Triangles( 8,  4,  3, 0x0,  9,  3,  2, 0x0),
+    gsSP2Triangles( 0, 10, 11, 0x0, 12, 10,  0, 0x0),
+    gsSP1Triangle(13, 14, 15, 0x0),
+    gsSPVertex(ghost_mario_left_hand_closed_shared_dl_vertex_group2, 14, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+    gsSP2Triangles( 5,  1,  3, 0x0,  6,  7,  8, 0x0),
+    gsSP2Triangles( 9, 10,  3, 0x0,  1,  0,  9, 0x0),
+    gsSP2Triangles( 9,  3,  1, 0x0,  5,  2,  1, 0x0),
+    gsSP2Triangles( 0,  2,  7, 0x0,  7,  2,  8, 0x0),
+    gsSP2Triangles( 8,  2, 11, 0x0, 11,  2,  5, 0x0),
+    gsSP2Triangles( 9,  7,  6, 0x0,  6,  8, 12, 0x0),
+    gsSP2Triangles(12,  8, 13, 0x0, 13,  5,  4, 0x0),
+    gsSPVertex(ghost_mario_left_hand_closed_shared_dl_vertex_group3, 15, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
+    gsSP2Triangles( 5,  1,  0, 0x0,  6,  7,  2, 0x0),
+    gsSP2Triangles( 8,  2,  3, 0x0,  3,  9, 10, 0x0),
+    gsSP2Triangles(10,  9, 11, 0x0, 11,  7,  6, 0x0),
+    gsSP2Triangles(10, 12, 13, 0x0,  6, 14, 12, 0x0),
+    gsSPVertex(ghost_mario_left_hand_closed_shared_dl_vertex_group4, 10, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  0, 0x0),
+    gsSP2Triangles( 1,  5,  2, 0x0,  0,  2,  3, 0x0),
+    gsSP2Triangles( 6,  7,  8, 0x0,  8,  9,  6, 0x0),
+    gsSP1Triangle( 7,  1,  8, 0x0),
+    gsSPEndDisplayList(),
+};
+
+//
+// Right arm
+//
+
+static const Vtx ghost_mario_right_arm_shared_dl_vertex_group1[] = {
+    {{{    57,    -14,    -22}, 0, {     0,      0}, {0x33, 0xcf, 0x97, 0x00}}},
+    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
+    {{{     6,    -15,    -30}, 0, {     0,      0}, {0xd6, 0xe6, 0x8c, 0x00}}},
+    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
+    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
+    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
+    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
+    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
+    {{{     7,     27,    -13}, 0, {     0,      0}, {0xda, 0x67, 0xc2, 0x00}}},
+    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
+    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
+    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
+    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
+    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_arm_shared_dl_vertex_group2[] = {
+    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
+    {{{    67,    -14,     28}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
+    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
+    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
+    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
+    {{{    67,     10,     21}, 0, {     0,      0}, {0x71, 0x2a, 0x25, 0x00}}},
+    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
+    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
+    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
+    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
+    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
+    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
+    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_arm_shared_dl_vertex_group3[] = {
+    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
+    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+    {{{     7,     27,    -13}, 0, {     0,      0}, {0xda, 0x67, 0xc2, 0x00}}},
+    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+    {{{     6,    -15,    -30}, 0, {     0,      0}, {0xd6, 0xe6, 0x8c, 0x00}}},
+    {{{    58,     19,     -9}, 0, {     0,      0}, {0x3e, 0x4a, 0xaf, 0x00}}},
+    {{{    57,    -14,    -22}, 0, {     0,      0}, {0x33, 0xcf, 0x97, 0x00}}},
+    {{{    58,     17,     27}, 0, {     0,      0}, {0x44, 0x59, 0x39, 0x00}}},
+    {{{    57,    -17,     37}, 0, {     0,      0}, {0x33, 0xe8, 0x71, 0x00}}},
+    {{{     7,     25,     32}, 0, {     0,      0}, {0xd9, 0x5c, 0x4d, 0x00}}},
+    {{{    57,    -38,      6}, 0, {     0,      0}, {0x3e, 0x93, 0x07, 0x00}}},
+    {{{     6,    -19,     44}, 0, {     0,      0}, {0xd5, 0xd4, 0x6e, 0x00}}},
+    {{{     5,    -44,      5}, 0, {     0,      0}, {0xd3, 0x8a, 0xf7, 0x00}}},
+    {{{    67,    -12,    -13}, 0, {     0,      0}, {0x68, 0xeb, 0xbc, 0x00}}},
+    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
+    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_arm_shared_dl_vertex_group4[] = {
+    {{{    -9,    -10,    -15}, 0, {     0,      0}, {0x8f, 0x01, 0xc7, 0x00}}},
+    {{{    -9,    -28,      6}, 0, {     0,      0}, {0x96, 0xbf, 0xec, 0x00}}},
+    {{{    -9,    -13,     30}, 0, {     0,      0}, {0x8a, 0xe9, 0x26, 0x00}}},
+    {{{    -8,     15,     -5}, 0, {     0,      0}, {0x91, 0x39, 0xed, 0x00}}},
+    {{{    -8,     14,     22}, 0, {     0,      0}, {0x99, 0x2e, 0x38, 0x00}}},
+    {{{    67,     11,     -4}, 0, {     0,      0}, {0x78, 0x26, 0xf1, 0x00}}},
+    {{{    67,    -14,     28}, 0, {     0,      0}, {0x6f, 0xe8, 0x37, 0x00}}},
+    {{{    66,    -28,      6}, 0, {     0,      0}, {0x75, 0xd1, 0xfe, 0x00}}},
+    {{{    67,     10,     21}, 0, {     0,      0}, {0x71, 0x2a, 0x25, 0x00}}},
+};
+
+static const Gfx ghost_mario_right_arm_shared_dl[] = {
+    gsSPVertex(ghost_mario_right_arm_shared_dl_vertex_group1, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+    gsSP2Triangles( 9,  2,  8, 0x0,  1, 10,  2, 0x0),
+    gsSP2Triangles( 2, 11,  8, 0x0,  8, 12,  6, 0x0),
+    gsSP2Triangles( 6, 13,  4, 0x0,  4, 14,  1, 0x0),
+    gsSP2Triangles( 9, 15,  0, 0x0,  0, 15,  3, 0x0),
+    gsSPVertex(ghost_mario_right_arm_shared_dl_vertex_group2, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+    gsSP2Triangles( 3,  4,  5, 0x0,  3,  6,  4, 0x0),
+    gsSP2Triangles( 1,  6,  3, 0x0,  0,  7,  1, 0x0),
+    gsSP2Triangles( 8,  7,  0, 0x0,  5,  4,  8, 0x0),
+    gsSP2Triangles( 9, 10, 11, 0x0, 12,  9, 13, 0x0),
+    gsSP1Triangle(14, 12, 15, 0x0),
+    gsSPVertex(ghost_mario_right_arm_shared_dl_vertex_group3, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  4, 0x0),
+    gsSP2Triangles( 5,  6,  4, 0x0,  7,  5,  2, 0x0),
+    gsSP2Triangles( 8,  7,  9, 0x0, 10,  8, 11, 0x0),
+    gsSP2Triangles( 6, 10, 12, 0x0, 13, 14, 15, 0x0),
+    gsSPVertex(ghost_mario_right_arm_shared_dl_vertex_group4, 9, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  2,  3,  0, 0x0),
+    gsSP2Triangles( 2,  4,  3, 0x0,  5,  6,  7, 0x0),
+    gsSP1Triangle( 5,  8,  6, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_right_forearm_shared_dl_vertex[] = {
+    {{{    47,    -15,    -19}, 0, {     0,      0}, {0x41, 0xcf, 0x9f, 0x00}}},
+    {{{    -3,    -39,      6}, 0, {     0,      0}, {0xd4, 0x8a, 0xf8, 0x00}}},
+    {{{    -2,    -15,    -23}, 0, {     0,      0}, {0xd7, 0xe5, 0x8c, 0x00}}},
+    {{{    46,    -36,      6}, 0, {     0,      0}, {0x3f, 0x94, 0x0f, 0x00}}},
+    {{{    -2,    -18,     38}, 0, {     0,      0}, {0xd6, 0xd5, 0x6f, 0x00}}},
+    {{{    47,    -17,     34}, 0, {     0,      0}, {0x42, 0xec, 0x6a, 0x00}}},
+    {{{    -1,     18,     28}, 0, {     0,      0}, {0xdb, 0x5d, 0x4d, 0x00}}},
+    {{{    48,     13,     25}, 0, {     0,      0}, {0x45, 0x5d, 0x32, 0x00}}},
+    {{{    -1,     20,     -9}, 0, {     0,      0}, {0xdb, 0x67, 0xc1, 0x00}}},
+    {{{    48,     15,     -7}, 0, {     0,      0}, {0x45, 0x4c, 0xb6, 0x00}}},
+    {{{   -14,    -28,      6}, 0, {     0,      0}, {0x90, 0xc9, 0xef, 0x00}}},
+    {{{   -14,    -12,    -13}, 0, {     0,      0}, {0x91, 0x01, 0xc3, 0x00}}},
+    {{{   -13,     12,     -4}, 0, {     0,      0}, {0x9e, 0x4b, 0xe7, 0x00}}},
+    {{{   -13,     10,     21}, 0, {     0,      0}, {0x8d, 0x22, 0x28, 0x00}}},
+    {{{   -14,    -14,     28}, 0, {     0,      0}, {0x9a, 0xd8, 0x3f, 0x00}}},
+    {{{    59,     -8,      7}, 0, {     0,      0}, {0x7f, 0xfd, 0x00, 0x00}}},
+};
+
+static const Gfx ghost_mario_right_forearm_shared_dl[] = {
+    gsSPVertex(ghost_mario_right_forearm_shared_dl_vertex, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+    gsSP2Triangles( 5,  6,  4, 0x0,  7,  8,  6, 0x0),
+    gsSP2Triangles( 9,  2,  8, 0x0,  1, 10,  2, 0x0),
+    gsSP2Triangles( 2, 11,  8, 0x0,  8, 12,  6, 0x0),
+    gsSP2Triangles( 6, 13,  4, 0x0,  4, 14,  1, 0x0),
+    gsSP2Triangles( 9, 15,  0, 0x0,  0, 15,  3, 0x0),
+    gsSP2Triangles( 3, 15,  5, 0x0,  5, 15,  7, 0x0),
+    gsSP2Triangles( 7, 15,  9, 0x0, 14, 10,  1, 0x0),
+    gsSP2Triangles(13, 14,  4, 0x0, 12, 13,  6, 0x0),
+    gsSP2Triangles(11, 12,  8, 0x0, 10, 11,  2, 0x0),
+    gsSP2Triangles( 9,  0,  2, 0x0,  7,  9,  8, 0x0),
+    gsSP2Triangles( 5,  7,  6, 0x0,  3,  5,  4, 0x0),
+    gsSP2Triangles( 0,  3,  1, 0x0, 11, 13, 12, 0x0),
+    gsSP2Triangles(11, 10, 13, 0x0, 10, 14, 13, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_right_hand_closed_dl_vertex_group1[] = {
+    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
+    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
+    {{{    31,    -40,     -1}, 0, {     0,      0}, {0x43, 0xa4, 0xc9, 0x00}}},
+    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
+    {{{    -2,     41,     -1}, 0, {     0,      0}, {0xed, 0x70, 0xc9, 0x00}}},
+    {{{    24,    -57,     -4}, 0, {     0,      0}, {0x73, 0xd4, 0xe6, 0x00}}},
+    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x48, 0x1e, 0x9d, 0x00}}},
+    {{{   -19,     47,     -4}, 0, {     0,      0}, {0x30, 0x72, 0xe5, 0x00}}},
+    {{{   -14,     26,     41}, 0, {     0,      0}, {0xed, 0x3d, 0x6d, 0x00}}},
+    {{{    13,    -38,     41}, 0, {     0,      0}, {0x15, 0xb3, 0x61, 0x00}}},
+    {{{    23,    -26,     35}, 0, {     0,      0}, {0x04, 0xc3, 0x6e, 0x00}}},
+    {{{    24,    -57,     -4}, 0, {     0,      0}, {0xa2, 0xaf, 0xe7, 0x00}}},
+    {{{   -16,    -12,      6}, 0, {     0,      0}, {0x8c, 0xcf, 0xf8, 0x00}}},
+    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x9b, 0xd5, 0xc2, 0x00}}},
+    {{{   -19,     47,     -4}, 0, {     0,      0}, {0x85, 0xf5, 0xe7, 0x00}}},
+    {{{    58,     81,      0}, 0, {     0,      0}, {0x14, 0x7b, 0xe9, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_hand_closed_dl_vertex_group2[] = {
+    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
+    {{{   104,    -26,      1}, 0, {     0,      0}, {0x68, 0xc5, 0xd7, 0x00}}},
+    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
+    {{{    75,    -33,     66}, 0, {     0,      0}, {0x08, 0xaf, 0x60, 0x00}}},
+    {{{    96,     -8,     52}, 0, {     0,      0}, {0x60, 0x06, 0x51, 0x00}}},
+    {{{    57,     10,     66}, 0, {     0,      0}, {0xfd, 0x1c, 0x7b, 0x00}}},
+    {{{    58,     81,      0}, 0, {     0,      0}, {0x14, 0x7b, 0xe9, 0x00}}},
+    {{{    97,     39,     24}, 0, {     0,      0}, {0x6b, 0x3a, 0x21, 0x00}}},
+    {{{    86,     30,    -33}, 0, {     0,      0}, {0x4f, 0x22, 0xa4, 0x00}}},
+    {{{    86,     15,     52}, 0, {     0,      0}, {0x40, 0x30, 0x61, 0x00}}},
+    {{{    54,     54,     44}, 0, {     0,      0}, {0x20, 0x51, 0x5c, 0x00}}},
+    {{{    29,     62,     34}, 0, {     0,      0}, {0xce, 0x4c, 0x57, 0x00}}},
+    {{{    29,      6,     49}, 0, {     0,      0}, {0xc2, 0xfa, 0x6e, 0x00}}},
+    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_hand_closed_dl_vertex_group3[] = {
+    {{{    31,    -40,     -1}, 0, {     0,      0}, {0x43, 0xa4, 0xc9, 0x00}}},
+    {{{    23,    -26,     35}, 0, {     0,      0}, {0x04, 0xc3, 0x6e, 0x00}}},
+    {{{    13,    -38,     41}, 0, {     0,      0}, {0x15, 0xb3, 0x61, 0x00}}},
+    {{{     1,     24,     35}, 0, {     0,      0}, {0xd2, 0x3c, 0x65, 0x00}}},
+    {{{   -14,     26,     41}, 0, {     0,      0}, {0xed, 0x3d, 0x6d, 0x00}}},
+    {{{    -2,     41,     -1}, 0, {     0,      0}, {0xed, 0x70, 0xc9, 0x00}}},
+    {{{    15,      0,    -23}, 0, {     0,      0}, {0x04, 0x01, 0x82, 0x00}}},
+    {{{     4,     -3,    -33}, 0, {     0,      0}, {0x48, 0x1e, 0x9d, 0x00}}},
+    {{{    35,      9,    -37}, 0, {     0,      0}, {0xe5, 0xf5, 0x85, 0x00}}},
+    {{{    29,      6,     49}, 0, {     0,      0}, {0xc2, 0xfa, 0x6e, 0x00}}},
+    {{{    55,    -44,     -4}, 0, {     0,      0}, {0x00, 0x86, 0xdf, 0x00}}},
+    {{{    75,    -33,     66}, 0, {     0,      0}, {0x08, 0xaf, 0x60, 0x00}}},
+    {{{    57,     10,     66}, 0, {     0,      0}, {0xfd, 0x1c, 0x7b, 0x00}}},
+    {{{    10,     60,     -4}, 0, {     0,      0}, {0xac, 0x5a, 0xe5, 0x00}}},
+    {{{    29,     62,     34}, 0, {     0,      0}, {0xce, 0x4c, 0x57, 0x00}}},
+};
+
+static const Gfx ghost_mario_right_hand_closed[] = {
+    gsSPVertex(ghost_mario_right_hand_closed_dl_vertex_group1, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 0, 4, 0x0),
+    gsSP2Triangles(2, 5, 6, 0x0, 6, 7, 4, 0x0),
+    gsSP2Triangles(4, 7, 8, 0x0, 8, 9, 10, 0x0),
+    gsSP2Triangles(9, 5, 2, 0x0, 11, 12, 13, 0x0),
+    gsSP2Triangles(13, 12, 14, 0x0, 14, 12, 8, 0x0),
+    gsSP2Triangles(8, 12, 9, 0x0, 9, 12, 11, 0x0),
+    gsSP1Triangle(3, 15, 0, 0x0),
+    gsSPVertex(ghost_mario_right_hand_closed_dl_vertex_group2, 14, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 1, 3, 0x0),
+    gsSP2Triangles(3, 4, 5, 0x0, 6, 7, 8, 0x0),
+    gsSP2Triangles(8, 7, 1, 0x0, 1, 7, 4, 0x0),
+    gsSP2Triangles(4, 7, 9, 0x0, 10, 7, 6, 0x0),
+    gsSP2Triangles(9, 10, 5, 0x0, 10, 11, 5, 0x0),
+    gsSP2Triangles(11, 12, 5, 0x0, 1, 4, 3, 0x0),
+    gsSP2Triangles(11, 10, 6, 0x0, 6, 13, 11, 0x0),
+    gsSP2Triangles(7, 10, 9, 0x0, 4, 9, 5, 0x0),
+    gsSP2Triangles(0, 8, 1, 0x0, 6, 8, 0, 0x0),
+    gsSPVertex(ghost_mario_right_hand_closed_dl_vertex_group3, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 1, 3, 4, 0x0),
+    gsSP2Triangles(4, 3, 5, 0x0, 5, 6, 7, 0x0),
+    gsSP2Triangles(7, 6, 0, 0x0, 8, 6, 5, 0x0),
+    gsSP2Triangles(9, 3, 1, 0x0, 0, 6, 8, 0x0),
+    gsSP2Triangles(10, 11, 1, 0x0, 11, 9, 1, 0x0),
+    gsSP2Triangles(11, 12, 9, 0x0, 1, 0, 10, 0x0),
+    gsSP2Triangles(13, 5, 3, 0x0, 3, 9, 14, 0x0),
+    gsSP1Triangle(14, 13, 3, 0x0),
+    gsSPEndDisplayList(),
+};
+
+//
+// Left leg
+//
+
+static const Vtx ghost_mario_left_thigh_dl_vertex_group1[] = {
+    {{{     1,    -44,      8}, 0, {     0,      0}, {0xab, 0xa2, 0x00, 0x00}}},
+    {{{   -15,      0,      7}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+    {{{     0,    -13,    -32}, 0, {     0,      0}, {0x9f, 0xe1, 0xb5, 0x00}}},
+    {{{    -4,     37,    -17}, 0, {     0,      0}, {0x9e, 0x30, 0xc0, 0x00}}},
+    {{{    -5,     37,     31}, 0, {     0,      0}, {0xa0, 0x3f, 0x34, 0x00}}},
+    {{{    -1,    -12,     47}, 0, {     0,      0}, {0x9e, 0xe3, 0x49, 0x00}}},
+    {{{    95,     -5,     48}, 0, {     0,      0}, {0x4e, 0xe9, 0x60, 0x00}}},
+    {{{   116,     10,      8}, 0, {     0,      0}, {0x7e, 0x09, 0x01, 0x00}}},
+    {{{    91,     45,     32}, 0, {     0,      0}, {0x3c, 0x4e, 0x4f, 0x00}}},
+    {{{    92,     45,    -16}, 0, {     0,      0}, {0x35, 0x5d, 0xbd, 0x00}}},
+    {{{    96,     -5,    -31}, 0, {     0,      0}, {0x50, 0xe8, 0xa1, 0x00}}},
+    {{{    98,    -37,      8}, 0, {     0,      0}, {0x46, 0x97, 0x01, 0x00}}},
+    {{{    19,    -15,    -42}, 0, {     0,      0}, {0xec, 0xd9, 0x8a, 0x00}}},
+    {{{    14,     48,    -23}, 0, {     0,      0}, {0xd7, 0x67, 0xc5, 0x00}}},
+    {{{    13,     48,     38}, 0, {     0,      0}, {0xe7, 0x6d, 0x3a, 0x00}}},
+    {{{    18,    -15,     58}, 0, {     0,      0}, {0xea, 0xda, 0x76, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_thigh_dl_vertex_group2[] = {
+    {{{    18,    -15,     58}, 0, {     0,      0}, {0xea, 0xda, 0x76, 0x00}}},
+    {{{     1,    -44,      8}, 0, {     0,      0}, {0xab, 0xa2, 0x00, 0x00}}},
+    {{{    21,    -54,      8}, 0, {     0,      0}, {0xf0, 0x83, 0x00, 0x00}}},
+    {{{    19,    -15,    -42}, 0, {     0,      0}, {0xec, 0xd9, 0x8a, 0x00}}},
+    {{{    -1,    -12,     47}, 0, {     0,      0}, {0x9e, 0xe3, 0x49, 0x00}}},
+    {{{   -15,      0,      7}, 0, {     0,      0}, {0x82, 0xf7, 0xff, 0x00}}},
+    {{{    98,    -37,      8}, 0, {     0,      0}, {0x46, 0x97, 0x01, 0x00}}},
+    {{{    13,     48,     38}, 0, {     0,      0}, {0xe7, 0x6d, 0x3a, 0x00}}},
+    {{{    91,     45,     32}, 0, {     0,      0}, {0x3c, 0x4e, 0x4f, 0x00}}},
+    {{{    14,     48,    -23}, 0, {     0,      0}, {0xd7, 0x67, 0xc5, 0x00}}},
+    {{{    92,     45,    -16}, 0, {     0,      0}, {0x35, 0x5d, 0xbd, 0x00}}},
+    {{{    96,     -5,    -31}, 0, {     0,      0}, {0x50, 0xe8, 0xa1, 0x00}}},
+    {{{    95,     -5,     48}, 0, {     0,      0}, {0x4e, 0xe9, 0x60, 0x00}}},
+    {{{     0,    -13,    -32}, 0, {     0,      0}, {0x9f, 0xe1, 0xb5, 0x00}}},
+    {{{    -5,     37,     31}, 0, {     0,      0}, {0xa0, 0x3f, 0x34, 0x00}}},
+    {{{    -4,     37,    -17}, 0, {     0,      0}, {0x9e, 0x30, 0xc0, 0x00}}},
+};
+
+static const Gfx ghost_mario_left_thigh[] = {
+    gsDPPipeSync(),
+    gsSPVertex(ghost_mario_left_thigh_dl_vertex_group1, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 1, 3, 0x0),
+    gsSP2Triangles(3, 1, 4, 0x0, 4, 1, 5, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 8, 7, 9, 0x0),
+    gsSP2Triangles(9, 7, 10, 0x0, 10, 7, 11, 0x0),
+    gsSP2Triangles(11, 7, 6, 0x0, 12, 3, 13, 0x0),
+    gsSP2Triangles(13, 4, 14, 0x0, 14, 4, 15, 0x0),
+    gsSPVertex(ghost_mario_left_thigh_dl_vertex_group2, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 1, 3, 0x0),
+    gsSP2Triangles(4, 5, 1, 0x0, 0, 2, 6, 0x0),
+    gsSP2Triangles(7, 0, 8, 0x0, 9, 7, 10, 0x0),
+    gsSP2Triangles(3, 9, 10, 0x0, 2, 3, 6, 0x0),
+    gsSP2Triangles(3, 11, 6, 0x0, 10, 11, 3, 0x0),
+    gsSP2Triangles(7, 8, 10, 0x0, 0, 12, 8, 0x0),
+    gsSP2Triangles(6, 12, 0, 0x0, 1, 13, 3, 0x0),
+    gsSP2Triangles(0, 4, 1, 0x0, 14, 4, 0, 0x0),
+    gsSP2Triangles(9, 15, 14, 0x0, 3, 13, 15, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_left_leg_shared_dl_vertex[] = {
+    {{{     4,    -37,      9}, 0, {     0,      0}, {0xc1, 0x93, 0x00, 0x00}}},
+    {{{    64,    -46,      9}, 0, {     0,      0}, {0x4b, 0x9a, 0x01, 0x00}}},
+    {{{    65,    -11,     54}, 0, {     0,      0}, {0x2d, 0xdb, 0x70, 0x00}}},
+    {{{     8,     44,     33}, 0, {     0,      0}, {0xcc, 0x5e, 0x43, 0x00}}},
+    {{{    68,     45,     37}, 0, {     0,      0}, {0x52, 0x4b, 0x3c, 0x00}}},
+    {{{    69,     45,    -18}, 0, {     0,      0}, {0x42, 0x61, 0xd1, 0x00}}},
+    {{{     9,     44,    -16}, 0, {     0,      0}, {0xc4, 0x4d, 0xaf, 0x00}}},
+    {{{    66,    -11,    -36}, 0, {     0,      0}, {0x2e, 0xda, 0x91, 0x00}}},
+    {{{     6,     -6,    -31}, 0, {     0,      0}, {0xb4, 0xe5, 0x9f, 0x00}}},
+    {{{     6,     -6,     49}, 0, {     0,      0}, {0xb3, 0xe7, 0x60, 0x00}}},
+    {{{   -14,      8,      8}, 0, {     0,      0}, {0x82, 0x06, 0xff, 0x00}}},
+    {{{    81,      3,      9}, 0, {     0,      0}, {0x7e, 0xfa, 0x01, 0x00}}},
+};
+
+static const Gfx ghost_mario_left_leg_shared_dl[] = {
+    gsSPVertex(ghost_mario_left_leg_shared_dl_vertex, 12, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
+    gsSP2Triangles( 3,  4,  5, 0x0,  6,  5,  7, 0x0),
+    gsSP2Triangles( 0,  7,  1, 0x0,  0,  8,  7, 0x0),
+    gsSP2Triangles( 7,  8,  6, 0x0,  5,  6,  3, 0x0),
+    gsSP2Triangles( 3,  9,  2, 0x0,  2,  9,  0, 0x0),
+    gsSP2Triangles( 3, 10,  9, 0x0,  5, 11,  7, 0x0),
+    gsSP2Triangles( 7, 11,  1, 0x0,  1, 11,  2, 0x0),
+    gsSP2Triangles( 2, 11,  4, 0x0,  4, 11,  5, 0x0),
+    gsSP2Triangles( 9, 10,  0, 0x0,  0, 10,  8, 0x0),
+    gsSP2Triangles( 8, 10,  6, 0x0,  6, 10,  3, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_left_foot_shared_dl_vertex_group1[] = {
+    {{{   110,      9,     35}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{   110,      8,    -20}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{    76,     20,    -41}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{    78,     21,     61}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{   -12,     53,    -32}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{   -11,     54,     53}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{   -39,     64,     -8}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{   -41,     65,     26}, 0, {     0,      0}, {0x2b, 0x77, 0xff, 0x00}}},
+    {{{    43,    -18,     54}, 0, {     0,      0}, {0x07, 0xb3, 0x64, 0x00}}},
+    {{{    78,     21,     61}, 0, {     0,      0}, {0x15, 0xdb, 0x77, 0x00}}},
+    {{{   -11,     54,     53}, 0, {     0,      0}, {0xd9, 0x00, 0x78, 0x00}}},
+    {{{    44,    -12,    -33}, 0, {     0,      0}, {0x01, 0xb7, 0x99, 0x00}}},
+    {{{   -35,     11,    -21}, 0, {     0,      0}, {0xb5, 0xd2, 0xa5, 0x00}}},
+    {{{   -12,     53,    -32}, 0, {     0,      0}, {0xd7, 0xfd, 0x89, 0x00}}},
+    {{{   -34,     12,     44}, 0, {     0,      0}, {0xb2, 0xd2, 0x58, 0x00}}},
+    {{{    76,     20,    -41}, 0, {     0,      0}, {0x0c, 0xd8, 0x89, 0x00}}},
+};
+
+static const Vtx ghost_mario_left_foot_shared_dl_vertex_group2[] = {
+    {{{    44,    -12,    -33}, 0, {     0,      0}, {0x01, 0xb7, 0x99, 0x00}}},
+    {{{    76,     20,    -41}, 0, {     0,      0}, {0x0c, 0xd8, 0x89, 0x00}}},
+    {{{   110,      8,    -20}, 0, {     0,      0}, {0x44, 0xad, 0xbe, 0x00}}},
+    {{{    80,    -31,      7}, 0, {     0,      0}, {0x34, 0x8d, 0xfb, 0x00}}},
+    {{{   110,      9,     35}, 0, {     0,      0}, {0x4c, 0xaf, 0x3c, 0x00}}},
+    {{{    78,     21,     61}, 0, {     0,      0}, {0x15, 0xdb, 0x77, 0x00}}},
+    {{{    43,    -18,     54}, 0, {     0,      0}, {0x07, 0xb3, 0x64, 0x00}}},
+    {{{   -34,     12,     44}, 0, {     0,      0}, {0xb2, 0xd2, 0x58, 0x00}}},
+    {{{   -11,     54,     53}, 0, {     0,      0}, {0xd9, 0x00, 0x78, 0x00}}},
+    {{{   -41,     65,     26}, 0, {     0,      0}, {0x90, 0x17, 0x35, 0x00}}},
+    {{{   -39,     64,     -8}, 0, {     0,      0}, {0x93, 0x16, 0xc4, 0x00}}},
+    {{{   -35,     11,    -21}, 0, {     0,      0}, {0xb5, 0xd2, 0xa5, 0x00}}},
+    {{{   -54,     15,      8}, 0, {     0,      0}, {0x88, 0xd8, 0xfd, 0x00}}},
+    {{{   -12,     53,    -32}, 0, {     0,      0}, {0xd7, 0xfd, 0x89, 0x00}}},
+    {{{    27,    -35,     11}, 0, {     0,      0}, {0xdb, 0x87, 0xfc, 0x00}}},
+};
+
+static const Gfx ghost_mario_left_foot_shared_dl[] = {
+    gsSPVertex(ghost_mario_left_foot_shared_dl_vertex_group1, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  0,  2, 0x0),
+    gsSP2Triangles( 3,  2,  4, 0x0,  5,  3,  4, 0x0),
+    gsSP2Triangles( 5,  4,  6, 0x0,  5,  6,  7, 0x0),
+    gsSP2Triangles( 8,  9, 10, 0x0, 11, 12, 13, 0x0),
+    gsSP2Triangles(14,  8, 10, 0x0, 11, 13, 15, 0x0),
+    gsSPVertex(ghost_mario_left_foot_shared_dl_vertex_group2, 15, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  2,  4, 0x0),
+    gsSP2Triangles( 2,  3,  0, 0x0,  4,  5,  6, 0x0),
+    gsSP2Triangles( 6,  3,  4, 0x0,  7,  8,  9, 0x0),
+    gsSP2Triangles(10, 11, 12, 0x0, 10, 13, 11, 0x0),
+    gsSP2Triangles(12,  9, 10, 0x0,  9, 12,  7, 0x0),
+    gsSP2Triangles(14,  0,  3, 0x0, 11,  0, 14, 0x0),
+    gsSP2Triangles( 3,  6, 14, 0x0, 14,  6,  7, 0x0),
+    gsSP2Triangles(14,  7, 12, 0x0, 12, 11, 14, 0x0),
+    gsSPEndDisplayList(),
+};
+
+//
+// Right leg
+//
+
+static const Vtx ghost_mario_right_thigh_shared_dl_vertex_group1[] = {
+    {{{    98,    -35,    -10}, 0, {     0,      0}, {0x47, 0x97, 0xfc, 0x00}}},
+    {{{    19,    -16,     41}, 0, {     0,      0}, {0xee, 0xd6, 0x76, 0x00}}},
+    {{{    22,    -54,     -9}, 0, {     0,      0}, {0xf2, 0x82, 0xfd, 0x00}}},
+    {{{    91,     46,     16}, 0, {     0,      0}, {0x35, 0x5c, 0x44, 0x00}}},
+    {{{    13,     48,     24}, 0, {     0,      0}, {0xd6, 0x66, 0x3e, 0x00}}},
+    {{{    12,     49,    -37}, 0, {     0,      0}, {0xe5, 0x6e, 0xc9, 0x00}}},
+    {{{    90,     47,    -32}, 0, {     0,      0}, {0x3b, 0x50, 0xb2, 0x00}}},
+    {{{    18,    -13,    -58}, 0, {     0,      0}, {0xea, 0xdc, 0x89, 0x00}}},
+    {{{     1,    -44,     -9}, 0, {     0,      0}, {0xad, 0xa1, 0xff, 0x00}}},
+    {{{   -15,      0,     -7}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+    {{{    -1,    -11,    -47}, 0, {     0,      0}, {0x9d, 0xe3, 0xb7, 0x00}}},
+    {{{    -6,     38,    -31}, 0, {     0,      0}, {0x9e, 0x3f, 0xcf, 0x00}}},
+    {{{    -5,     36,     18}, 0, {     0,      0}, {0x9e, 0x2d, 0x42, 0x00}}},
+    {{{    95,     -3,    -49}, 0, {     0,      0}, {0x4d, 0xec, 0x9e, 0x00}}},
+    {{{   116,     11,     -9}, 0, {     0,      0}, {0x7e, 0x0b, 0xfe, 0x00}}},
+    {{{    96,     -5,     30}, 0, {     0,      0}, {0x51, 0xe7, 0x5d, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_thigh_shared_dl_vertex_group2[] = {
+    {{{    -5,     36,     18}, 0, {     0,      0}, {0x9e, 0x2d, 0x42, 0x00}}},
+    {{{   -15,      0,     -7}, 0, {     0,      0}, {0x82, 0xf5, 0x02, 0x00}}},
+    {{{     0,    -14,     31}, 0, {     0,      0}, {0xa0, 0xdf, 0x4b, 0x00}}},
+    {{{     1,    -44,     -9}, 0, {     0,      0}, {0xad, 0xa1, 0xff, 0x00}}},
+    {{{    19,    -16,     41}, 0, {     0,      0}, {0xee, 0xd6, 0x76, 0x00}}},
+    {{{    -6,     38,    -31}, 0, {     0,      0}, {0x9e, 0x3f, 0xcf, 0x00}}},
+    {{{    13,     48,     24}, 0, {     0,      0}, {0xd6, 0x66, 0x3e, 0x00}}},
+    {{{    18,    -13,    -58}, 0, {     0,      0}, {0xea, 0xdc, 0x89, 0x00}}},
+    {{{    -1,    -11,    -47}, 0, {     0,      0}, {0x9d, 0xe3, 0xb7, 0x00}}},
+    {{{    95,     -3,    -49}, 0, {     0,      0}, {0x4d, 0xec, 0x9e, 0x00}}},
+    {{{    98,    -35,    -10}, 0, {     0,      0}, {0x47, 0x97, 0xfc, 0x00}}},
+    {{{    90,     47,    -32}, 0, {     0,      0}, {0x3b, 0x50, 0xb2, 0x00}}},
+    {{{    91,     46,     16}, 0, {     0,      0}, {0x35, 0x5c, 0x44, 0x00}}},
+    {{{    12,     49,    -37}, 0, {     0,      0}, {0xe5, 0x6e, 0xc9, 0x00}}},
+    {{{    96,     -5,     30}, 0, {     0,      0}, {0x51, 0xe7, 0x5d, 0x00}}},
+};
+
+static const Gfx ghost_mario_right_thigh_shared_dl[] = {
+    gsSPVertex(ghost_mario_right_thigh_shared_dl_vertex_group1, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  1, 0x0),
+    gsSP2Triangles( 3,  5,  4, 0x0,  6,  7,  5, 0x0),
+    gsSP2Triangles( 0,  2,  7, 0x0,  8,  9, 10, 0x0),
+    gsSP2Triangles( 1,  8,  2, 0x0,  2,  8,  7, 0x0),
+    gsSP2Triangles( 7, 11,  5, 0x0,  5, 11,  4, 0x0),
+    gsSP2Triangles( 4, 12,  1, 0x0, 13, 14,  0, 0x0),
+    gsSP2Triangles( 0, 14, 15, 0x0, 15, 14,  3, 0x0),
+    gsSP2Triangles( 3, 14,  6, 0x0,  6, 14, 13, 0x0),
+    gsSP2Triangles(10,  9, 11, 0x0, 11,  9, 12, 0x0),
+    gsSPVertex(ghost_mario_right_thigh_shared_dl_vertex_group2, 15, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+    gsSP2Triangles( 0,  2,  4, 0x0,  5,  0,  6, 0x0),
+    gsSP2Triangles( 7,  8,  5, 0x0,  3,  8,  7, 0x0),
+    gsSP2Triangles( 4,  2,  3, 0x0,  7,  9, 10, 0x0),
+    gsSP2Triangles(11,  9,  7, 0x0, 12, 11, 13, 0x0),
+    gsSP2Triangles( 4, 14, 12, 0x0, 10, 14,  4, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_right_leg_shared_dl_vertex_group1[] = {
+    {{{    63,    -45,    -12}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
+    {{{    66,    -11,     34}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
+    {{{     4,    -36,    -10}, 0, {     0,      0}, {0xc0, 0x93, 0xfe, 0x00}}},
+    {{{    66,    -11,     34}, 0, {     0,      0}, {0xfb, 0x22, 0x7a, 0x00}}},
+    {{{    69,     45,     18}, 0, {     0,      0}, {0xfc, 0x22, 0x7a, 0x00}}},
+    {{{     9,     44,     16}, 0, {     0,      0}, {0xc6, 0x4b, 0x53, 0x00}}},
+    {{{    69,     45,     18}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
+    {{{    69,     46,    -37}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
+    {{{     9,     46,    -33}, 0, {     0,      0}, {0xcd, 0x60, 0xc0, 0x00}}},
+    {{{    69,     46,    -37}, 0, {     0,      0}, {0xf7, 0x27, 0x88, 0x00}}},
+    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xf8, 0x28, 0x88, 0x00}}},
+    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
+    {{{    63,    -45,    -12}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
+    {{{     6,     -6,     30}, 0, {     0,      0}, {0xb4, 0xe4, 0x61, 0x00}}},
+    {{{   -13,     10,     -9}, 0, {     0,      0}, {0x82, 0x08, 0x02, 0x00}}},
+    {{{     5,     -3,    -50}, 0, {     0,      0}, {0xb2, 0xea, 0xa0, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_leg_shared_dl_vertex_group2[] = {
+    {{{    65,     -9,    -56}, 0, {     0,      0}, {0x75, 0xee, 0xd5, 0x00}}},
+    {{{    83,      4,    -10}, 0, {     0,      0}, {0x7e, 0xf9, 0xfe, 0x00}}},
+    {{{    63,    -45,    -12}, 0, {     0,      0}, {0x75, 0xd1, 0xfd, 0x00}}},
+    {{{    66,    -11,     34}, 0, {     0,      0}, {0x77, 0xec, 0x26, 0x00}}},
+    {{{    69,     45,     18}, 0, {     0,      0}, {0x7a, 0x18, 0x17, 0x00}}},
+    {{{    69,     46,    -37}, 0, {     0,      0}, {0x79, 0x19, 0xe6, 0x00}}},
+    {{{     4,    -36,    -10}, 0, {     0,      0}, {0xc0, 0x93, 0xfe, 0x00}}},
+    {{{     5,     -3,    -50}, 0, {     0,      0}, {0xb2, 0xea, 0xa0, 0x00}}},
+    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xef, 0xa0, 0xb0, 0x00}}},
+    {{{    65,     -9,    -56}, 0, {     0,      0}, {0xf8, 0x28, 0x88, 0x00}}},
+    {{{     9,     46,    -33}, 0, {     0,      0}, {0xcd, 0x60, 0xc0, 0x00}}},
+    {{{     9,     44,     16}, 0, {     0,      0}, {0xc6, 0x4b, 0x53, 0x00}}},
+    {{{    69,     45,     18}, 0, {     0,      0}, {0xff, 0x7f, 0x03, 0x00}}},
+    {{{     6,     -6,     30}, 0, {     0,      0}, {0xb4, 0xe4, 0x61, 0x00}}},
+    {{{    66,    -11,     34}, 0, {     0,      0}, {0xfb, 0x22, 0x7a, 0x00}}},
+    {{{    66,    -11,     34}, 0, {     0,      0}, {0xf2, 0x9b, 0x4a, 0x00}}},
+};
+
+static const Gfx ghost_mario_right_leg_shared_dl[] = {
+    gsSPVertex(ghost_mario_right_leg_shared_dl_vertex_group1, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
+    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10,  8, 0x0),
+    gsSP2Triangles(11, 12,  2, 0x0, 13, 14,  2, 0x0),
+    gsSP2Triangles( 2, 14, 15, 0x0, 15, 14,  8, 0x0),
+    gsSP2Triangles( 8, 14,  5, 0x0,  5, 14, 13, 0x0),
+    gsSPVertex(ghost_mario_right_leg_shared_dl_vertex_group2, 16, 0),
+    gsSP2Triangles( 0,  1,  2, 0x0,  2,  1,  3, 0x0),
+    gsSP2Triangles( 3,  1,  4, 0x0,  4,  1,  5, 0x0),
+    gsSP2Triangles( 5,  1,  0, 0x0,  6,  7,  8, 0x0),
+    gsSP2Triangles( 9,  7, 10, 0x0, 10, 11, 12, 0x0),
+    gsSP2Triangles(11, 13, 14, 0x0, 15, 13,  6, 0x0),
+    gsSPEndDisplayList(),
+};
+
+static const Vtx ghost_mario_right_foot_dl_vertex_group1[] = {
+    {{{    27,    -35,    -11}, 0, {     0,      0}, {0xdc, 0x87, 0x06, 0x00}}},
+    {{{   -36,     11,     19}, 0, {     0,      0}, {0xb5, 0xd3, 0x5b, 0x00}}},
+    {{{   -54,     14,    -10}, 0, {     0,      0}, {0x89, 0xd6, 0x03, 0x00}}},
+    {{{   -34,     11,    -46}, 0, {     0,      0}, {0xb4, 0xd0, 0xa8, 0x00}}},
+    {{{    43,    -18,    -55}, 0, {     0,      0}, {0x0a, 0xb2, 0x9d, 0x00}}},
+    {{{    80,    -29,     -7}, 0, {     0,      0}, {0x36, 0x8e, 0x08, 0x00}}},
+    {{{    44,    -11,     32}, 0, {     0,      0}, {0x01, 0xb8, 0x68, 0x00}}},
+    {{{   -42,     64,    -29}, 0, {     0,      0}, {0x90, 0x14, 0xc9, 0x00}}},
+    {{{   -40,     63,      5}, 0, {     0,      0}, {0x92, 0x15, 0x3b, 0x00}}},
+    {{{   -14,     54,     29}, 0, {     0,      0}, {0xd5, 0xfe, 0x77, 0x00}}},
+    {{{   -11,     53,    -56}, 0, {     0,      0}, {0xda, 0xfe, 0x87, 0x00}}},
+    {{{   110,     11,    -36}, 0, {     0,      0}, {0x4e, 0xb0, 0xc6, 0x00}}},
+    {{{    78,     22,    -61}, 0, {     0,      0}, {0x17, 0xd9, 0x8a, 0x00}}},
+    {{{   109,     11,     20}, 0, {     0,      0}, {0x45, 0xaf, 0x44, 0x00}}},
+    {{{    75,     23,     40}, 0, {     0,      0}, {0x0b, 0xda, 0x78, 0x00}}},
+};
+
+static const Vtx ghost_mario_right_foot_dl_vertex_group2[] = {
+    {{{   -42,     64,    -29}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+    {{{   -40,     63,      5}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+    {{{   -11,     53,    -56}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+    {{{   -14,     54,     29}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+    {{{    78,     22,    -61}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+    {{{    75,     23,     40}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+    {{{   110,     11,    -36}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+    {{{   109,     11,     20}, 0, {     0,      0}, {0x29, 0x77, 0x00, 0x00}}},
+};
+
+static const Gfx ghost_mario_right_foot[] = {
+    gsSPVertex(ghost_mario_right_foot_dl_vertex_group1, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 3, 0, 0x0),
+    gsSP2Triangles(3, 4, 0, 0x0, 0, 4, 5, 0x0),
+    gsSP2Triangles(0, 6, 1, 0x0, 5, 6, 0, 0x0),
+    gsSP2Triangles(3, 2, 7, 0x0, 8, 7, 2, 0x0),
+    gsSP2Triangles(1, 9, 8, 0x0, 2, 1, 8, 0x0),
+    gsSP2Triangles(7, 10, 3, 0x0, 11, 5, 4, 0x0),
+    gsSP2Triangles(4, 12, 11, 0x0, 6, 5, 13, 0x0),
+    gsSP2Triangles(11, 13, 5, 0x0, 13, 14, 6, 0x0),
+    gsSP2Triangles(14, 9, 6, 0x0, 10, 4, 3, 0x0),
+    gsSP2Triangles(9, 1, 6, 0x0, 10, 12, 4, 0x0),
+    gsSPVertex(ghost_mario_right_foot_dl_vertex_group2, 8, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 1, 3, 2, 0x0),
+    gsSP2Triangles(3, 4, 2, 0x0, 3, 5, 4, 0x0),
+    gsSP2Triangles(5, 6, 4, 0x0, 5, 7, 6, 0x0),
+    gsSPEndDisplayList(),
+};
+
+//
+// Body
+//
+
+static const Vtx ghost_mario_gold_button_dl_vertex[] = {
+    {{{     9,     89,     41}, 0, {   180,    962}, {0x14, 0x78, 0x23, 0xff}}},
+    {{{     3,     77,     62}, 0, {   682,    966}, {0x04, 0x6a, 0x44, 0xff}}},
+    {{{    47,     75,     35}, 0, {    34,    106}, {0x39, 0x6a, 0x26, 0xff}}},
+    {{{    28,     85,     30}, 0, {   -60,    572}, {0x2c, 0x76, 0x08, 0xff}}},
+    {{{    17,     66,     76}, 0, {   966,    590}, {0x19, 0x58, 0x57, 0xff}}},
+    {{{    32,     62,     74}, 0, {   902,    252}, {0x29, 0x53, 0x56, 0xff}}},
+    {{{    48,     64,     59}, 0, {   548,      0}, {0x4d, 0x51, 0x3a, 0xff}}},
+    {{{     9,     89,    -40}, 0, {   776,    920}, {0x10, 0x7b, 0xe7, 0xff}}},
+    {{{    28,     85,    -29}, 0, {   990,    512}, {0x2d, 0x75, 0xf2, 0xff}}},
+    {{{    47,     75,    -34}, 0, {   850,     72}, {0x3e, 0x6a, 0xe2, 0xff}}},
+    {{{     3,     77,    -61}, 0, {   264,    972}, {0x03, 0x6a, 0xbb, 0xff}}},
+    {{{    48,     64,    -58}, 0, {   312,      0}, {0x4d, 0x50, 0xc5, 0xff}}},
+    {{{    32,     62,    -73}, 0, {   -24,    310}, {0x29, 0x52, 0xa9, 0xff}}},
+    {{{    17,     66,    -75}, 0, {   -58,    642}, {0x17, 0x58, 0xa8, 0xff}}},
+};
+
+static const Vtx ghost_mario_tshirt_shared_dl_vertex_group1[] = {
+    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
+    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
+    {{{    82,     37,     27}, 0, {     0,      0}, {0x66, 0x48, 0x14, 0xff}}},
+    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
+    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+    {{{     6,    -10,    -92}, 0, {     0,      0}, {0x00, 0xeb, 0x83, 0xff}}},
+    {{{    47,      3,    -88}, 0, {     0,      0}, {0x30, 0x09, 0x8b, 0xff}}},
+    {{{    46,    -34,    -83}, 0, {     0,      0}, {0x24, 0xc8, 0x95, 0xff}}},
+    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+    {{{    20,    -61,    -67}, 0, {     0,      0}, {0x0a, 0x9a, 0xb7, 0xff}}},
+    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
+    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
+    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+    {{{    46,    -34,     84}, 0, {     0,      0}, {0x24, 0xc8, 0x6b, 0xff}}},
+};
+
+static const Vtx ghost_mario_tshirt_shared_dl_vertex_group2[] = {
+    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+    {{{    46,    -34,     84}, 0, {     0,      0}, {0x24, 0xc8, 0x6b, 0xff}}},
+    {{{     6,    -11,     93}, 0, {     0,      0}, {0x00, 0xea, 0x7c, 0xff}}},
+    {{{    47,      3,     89}, 0, {     0,      0}, {0x30, 0x08, 0x75, 0xff}}},
+    {{{    84,    -29,     63}, 0, {     0,      0}, {0x5f, 0xde, 0x4c, 0xff}}},
+    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+    {{{    93,    -36,     26}, 0, {     0,      0}, {0x6b, 0xbf, 0x0d, 0xff}}},
+    {{{    93,    -36,    -25}, 0, {     0,      0}, {0x66, 0xb7, 0xf0, 0xff}}},
+    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
+    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
+    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
+};
+
+static const Vtx ghost_mario_tshirt_shared_dl_vertex_group3[] = {
+    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+    {{{    47,      3,    -88}, 0, {     0,      0}, {0x30, 0x09, 0x8b, 0xff}}},
+    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
+    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
+    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+};
+
+static const Vtx ghost_mario_pants_overalls_shared_dl_vertex_group1[] = {
+    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
+    {{{    28,     85,     30}, 0, {     0,      0}, {0x2c, 0x76, 0x08, 0xff}}},
+    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
+    {{{    28,     85,    -29}, 0, {     0,      0}, {0x2d, 0x75, 0xf2, 0xff}}},
+    {{{     9,     89,     41}, 0, {     0,      0}, {0x14, 0x78, 0x23, 0xff}}},
+    {{{     9,     89,    -40}, 0, {     0,      0}, {0x10, 0x7b, 0xe7, 0xff}}},
+    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
+    {{{   -15,     87,    -35}, 0, {     0,      0}, {0xea, 0x76, 0xda, 0xff}}},
+    {{{     3,     77,    -61}, 0, {     0,      0}, {0x03, 0x6a, 0xbb, 0xff}}},
+    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
+    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+    {{{   -40,     72,    -54}, 0, {     0,      0}, {0xc5, 0x5f, 0xc6, 0xff}}},
+    {{{   -40,     72,     55}, 0, {     0,      0}, {0xc4, 0x5e, 0x3a, 0xff}}},
+    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
+    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
+};
+
+static const Vtx ghost_mario_pants_overalls_shared_dl_vertex_group2[] = {
+    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
+    {{{    48,     64,    -58}, 0, {     0,      0}, {0x4d, 0x50, 0xc5, 0xff}}},
+    {{{     3,     77,     62}, 0, {     0,      0}, {0x04, 0x6a, 0x44, 0xff}}},
+    {{{     9,     89,     41}, 0, {     0,      0}, {0x14, 0x78, 0x23, 0xff}}},
+    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
+    {{{    47,     75,     35}, 0, {     0,      0}, {0x39, 0x6a, 0x26, 0xff}}},
+    {{{    48,     64,     59}, 0, {     0,      0}, {0x4d, 0x51, 0x3a, 0xff}}},
+    {{{    82,     37,     27}, 0, {     0,      0}, {0x66, 0x48, 0x14, 0xff}}},
+    {{{    32,     62,     74}, 0, {     0,      0}, {0x29, 0x53, 0x56, 0xff}}},
+    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
+    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
+    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
+    {{{    32,     62,    -73}, 0, {     0,      0}, {0x29, 0x52, 0xa9, 0xff}}},
+    {{{    47,     75,    -34}, 0, {     0,      0}, {0x3e, 0x6a, 0xe2, 0xff}}},
+};
+
+static const Vtx ghost_mario_pants_overalls_shared_dl_vertex_group3[] = {
+    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+    {{{    82,     37,    -26}, 0, {     0,      0}, {0x69, 0x43, 0xec, 0xff}}},
+    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+    {{{    20,    -61,    -67}, 0, {     0,      0}, {0x0a, 0x9a, 0xb7, 0xff}}},
+    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
+    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
+    {{{   -27,    -25,    -86}, 0, {     0,      0}, {0xcb, 0xd5, 0x96, 0xff}}},
+    {{{     6,    -10,    -92}, 0, {     0,      0}, {0x00, 0xeb, 0x83, 0xff}}},
+    {{{   -29,    -58,    -59}, 0, {     0,      0}, {0xc9, 0x9a, 0xcf, 0xff}}},
+    {{{     8,    -74,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
+    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
+    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
+    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
+    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+};
+
+static const Vtx ghost_mario_pants_overalls_shared_dl_vertex_group4[] = {
+    {{{     8,    -74,      0}, 0, {     0,      0}, {0xfd, 0x82, 0x00, 0xff}}},
+    {{{    20,    -61,     68}, 0, {     0,      0}, {0x0a, 0x99, 0x49, 0xff}}},
+    {{{   -29,    -58,     59}, 0, {     0,      0}, {0xc8, 0x99, 0x30, 0xff}}},
+    {{{   -27,    -25,     87}, 0, {     0,      0}, {0xcb, 0xd3, 0x69, 0xff}}},
+    {{{     6,    -11,     93}, 0, {     0,      0}, {0x00, 0xea, 0x7c, 0xff}}},
+    {{{   -27,     26,     91}, 0, {     0,      0}, {0xc8, 0x0e, 0x70, 0xff}}},
+    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+    {{{   -59,    -28,     38}, 0, {     0,      0}, {0x8d, 0xd8, 0x21, 0xff}}},
+    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
+    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
+    {{{   -71,     54,    -29}, 0, {     0,      0}, {0x8f, 0x2a, 0xda, 0xff}}},
+    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
+    {{{   -71,     54,     30}, 0, {     0,      0}, {0x94, 0x2a, 0x31, 0xff}}},
+    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
+    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
+};
+
+static const Vtx ghost_mario_pants_overalls_shared_dl_vertex_group5[] = {
+    {{{   -71,     54,    -29}, 0, {     0,      0}, {0x8f, 0x2a, 0xda, 0xff}}},
+    {{{   -43,     83,    -24}, 0, {     0,      0}, {0xcc, 0x72, 0xee, 0xff}}},
+    {{{   -40,     72,    -54}, 0, {     0,      0}, {0xc5, 0x5f, 0xc6, 0xff}}},
+    {{{   -59,    -28,    -37}, 0, {     0,      0}, {0x90, 0xd5, 0xd9, 0xff}}},
+    {{{   -59,    -28,     38}, 0, {     0,      0}, {0x8d, 0xd8, 0x21, 0xff}}},
+    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+    {{{   -43,     83,     25}, 0, {     0,      0}, {0xbc, 0x69, 0x11, 0xff}}},
+    {{{   -71,     54,     30}, 0, {     0,      0}, {0x94, 0x2a, 0x31, 0xff}}},
+    {{{   -30,    -66,      0}, 0, {     0,      0}, {0xb8, 0x98, 0x00, 0xff}}},
+    {{{   -27,     26,     91}, 0, {     0,      0}, {0xc8, 0x0e, 0x70, 0xff}}},
+    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
+    {{{   -40,     72,     55}, 0, {     0,      0}, {0xc4, 0x5e, 0x3a, 0xff}}},
+    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+    {{{    -4,     58,     84}, 0, {     0,      0}, {0xfb, 0x43, 0x6b, 0xff}}},
+};
+
+static const Vtx ghost_mario_pants_overalls_shared_dl_vertex_group6[] = {
+    {{{   -27,     26,    -89}, 0, {     0,      0}, {0xc7, 0x0f, 0x90, 0xff}}},
+    {{{    -4,     58,    -82}, 0, {     0,      0}, {0xf9, 0x42, 0x94, 0xff}}},
+    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+    {{{    80,     14,    -61}, 0, {     0,      0}, {0x60, 0x28, 0xb8, 0xff}}},
+    {{{   100,      1,    -23}, 0, {     0,      0}, {0x7c, 0x09, 0xea, 0xff}}},
+    {{{    84,    -29,    -62}, 0, {     0,      0}, {0x5f, 0xde, 0xb4, 0xff}}},
+    {{{    93,    -36,    -25}, 0, {     0,      0}, {0x66, 0xb7, 0xf0, 0xff}}},
+    {{{    66,    -52,    -50}, 0, {     0,      0}, {0x3b, 0x9a, 0xd3, 0xff}}},
+    {{{    54,    -63,      0}, 0, {     0,      0}, {0x30, 0x8b, 0x00, 0xff}}},
+    {{{    66,    -52,     51}, 0, {     0,      0}, {0x3b, 0x9a, 0x2d, 0xff}}},
+    {{{    93,    -36,     26}, 0, {     0,      0}, {0x6b, 0xbf, 0x0d, 0xff}}},
+    {{{    84,    -29,     63}, 0, {     0,      0}, {0x5f, 0xde, 0x4c, 0xff}}},
+    {{{   100,      1,     24}, 0, {     0,      0}, {0x7a, 0x17, 0x16, 0xff}}},
+    {{{    80,     14,     62}, 0, {     0,      0}, {0x60, 0x28, 0x47, 0xff}}},
+};
+
+static const Vtx ghost_mario_pants_overalls_shared_dl_vertex_group7[] = {
+    {{{    17,     66,    -75}, 0, {     0,      0}, {0x17, 0x58, 0xa8, 0xff}}},
+    {{{    -4,     58,    -82}, 0, {     0,      0}, {0xf9, 0x42, 0x94, 0xff}}},
+    {{{     3,     77,    -61}, 0, {     0,      0}, {0x03, 0x6a, 0xbb, 0xff}}},
+    {{{   -28,     63,    -74}, 0, {     0,      0}, {0xd1, 0x4f, 0xaa, 0xff}}},
+    {{{    32,     62,     74}, 0, {     0,      0}, {0x29, 0x53, 0x56, 0xff}}},
+    {{{    17,     66,     76}, 0, {     0,      0}, {0x19, 0x58, 0x57, 0xff}}},
+    {{{    13,     33,     91}, 0, {     0,      0}, {0x12, 0x20, 0x79, 0xff}}},
+    {{{   -28,     63,     75}, 0, {     0,      0}, {0xd0, 0x50, 0x55, 0xff}}},
+    {{{    -4,     58,     84}, 0, {     0,      0}, {0xfb, 0x43, 0x6b, 0xff}}},
+    {{{     3,     77,     62}, 0, {     0,      0}, {0x04, 0x6a, 0x44, 0xff}}},
+    {{{   -15,     88,     35}, 0, {     0,      0}, {0xec, 0x7a, 0x1c, 0xff}}},
+    {{{    12,     33,    -90}, 0, {     0,      0}, {0x11, 0x20, 0x87, 0xff}}},
+    {{{    32,     62,    -73}, 0, {     0,      0}, {0x29, 0x52, 0xa9, 0xff}}},
+    {{{    43,     51,    -74}, 0, {     0,      0}, {0x3c, 0x32, 0x9d, 0xff}}},
+    {{{    44,     51,     75}, 0, {     0,      0}, {0x3c, 0x34, 0x62, 0xff}}},
+};
+
+static const Gfx ghost_mario_torso_shared_dl[] = {
+    gsSPVertex(ghost_mario_gold_button_dl_vertex, 14, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 3, 0, 0x0),
+    gsSP2Triangles(1, 4, 2, 0x0, 5, 6, 2, 0x0),
+    gsSP2Triangles(4, 5, 2, 0x0, 7, 8, 9, 0x0),
+    gsSP2Triangles(10, 7, 9, 0x0, 9, 11, 12, 0x0),
+    gsSP2Triangles(12, 13, 9, 0x0, 13, 10, 9, 0x0),
+    gsSPVertex(ghost_mario_pants_overalls_shared_dl_vertex_group1, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 3, 1, 0x0),
+    gsSP2Triangles(4, 1, 5, 0x0, 1, 3, 5, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 5, 7, 6, 0x0),
+    gsSP2Triangles(7, 5, 8, 0x0, 9, 6, 7, 0x0),
+    gsSP2Triangles(7, 8, 10, 0x0, 10, 11, 7, 0x0),
+    gsSP2Triangles(9, 7, 11, 0x0, 12, 6, 13, 0x0),
+    gsSP2Triangles(9, 13, 6, 0x0, 6, 12, 14, 0x0),
+    gsSPVertex(ghost_mario_pants_overalls_shared_dl_vertex_group2, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 9, 10, 7, 0x0),
+    gsSP2Triangles(7, 10, 11, 0x0, 11, 8, 7, 0x0),
+    gsSP2Triangles(12, 8, 11, 0x0, 13, 0, 2, 0x0),
+    gsSP2Triangles(2, 1, 14, 0x0, 2, 15, 13, 0x0),
+    gsSPVertex(ghost_mario_pants_overalls_shared_dl_vertex_group3, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(3, 6, 7, 0x0, 3, 8, 6, 0x0),
+    gsSP2Triangles(5, 9, 3, 0x0, 8, 3, 9, 0x0),
+    gsSP2Triangles(6, 8, 10, 0x0, 11, 10, 8, 0x0),
+    gsSP2Triangles(9, 11, 8, 0x0, 6, 12, 7, 0x0),
+    gsSP2Triangles(12, 6, 10, 0x0, 7, 12, 13, 0x0),
+    gsSP2Triangles(14, 5, 15, 0x0, 14, 9, 5, 0x0),
+    gsSPVertex(ghost_mario_pants_overalls_shared_dl_vertex_group4, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 1, 3, 0x0),
+    gsSP2Triangles(1, 4, 3, 0x0, 5, 4, 6, 0x0),
+    gsSP2Triangles(4, 5, 3, 0x0, 2, 3, 7, 0x0),
+    gsSP2Triangles(7, 3, 5, 0x0, 8, 2, 7, 0x0),
+    gsSP2Triangles(2, 8, 0, 0x0, 9, 10, 11, 0x0),
+    gsSP2Triangles(12, 11, 10, 0x0, 11, 7, 13, 0x0),
+    gsSP1Triangle(14, 15, 11, 0x0),
+    gsSPVertex(ghost_mario_pants_overalls_shared_dl_vertex_group5, 14, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 3, 4, 0x0),
+    gsSP2Triangles(2, 5, 0, 0x0, 6, 0, 7, 0x0),
+    gsSP2Triangles(4, 3, 8, 0x0, 9, 7, 4, 0x0),
+    gsSP2Triangles(7, 10, 11, 0x0, 11, 6, 7, 0x0),
+    gsSP2Triangles(9, 12, 13, 0x0, 10, 9, 13, 0x0),
+    gsSP1Triangle(7, 9, 10, 0x0),
+    gsSPVertex(ghost_mario_pants_overalls_shared_dl_vertex_group6, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 3, 1, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 5, 7, 6, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 9, 8, 7, 0x0),
+    gsSP2Triangles(10, 11, 12, 0x0, 12, 11, 13, 0x0),
+    gsSP2Triangles(14, 12, 13, 0x0, 11, 10, 9, 0x0),
+    gsSPVertex(ghost_mario_pants_overalls_shared_dl_vertex_group7, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 2, 1, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 7, 8, 9, 0x0),
+    gsSP2Triangles(10, 7, 9, 0x0, 9, 8, 5, 0x0),
+    gsSP2Triangles(5, 8, 6, 0x0, 11, 1, 0, 0x0),
+    gsSP2Triangles(11, 12, 13, 0x0, 6, 14, 4, 0x0),
+    gsSP1Triangle(11, 0, 12, 0x0),
+    gsSPVertex(ghost_mario_tshirt_shared_dl_vertex_group1, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 2, 3, 0x0),
+    gsSP2Triangles(4, 3, 2, 0x0, 4, 5, 3, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 6, 9, 7, 0x0),
+    gsSP2Triangles(6, 8, 10, 0x0, 11, 8, 12, 0x0),
+    gsSP2Triangles(12, 8, 7, 0x0, 8, 11, 10, 0x0),
+    gsSP1Triangle(13, 14, 15, 0x0),
+    gsSPVertex(ghost_mario_tshirt_shared_dl_vertex_group2, 14, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 1, 3, 2, 0x0),
+    gsSP2Triangles(3, 1, 4, 0x0, 4, 1, 5, 0x0),
+    gsSP2Triangles(6, 2, 3, 0x0, 7, 8, 9, 0x0),
+    gsSP2Triangles(7, 9, 10, 0x0, 11, 10, 9, 0x0),
+    gsSP2Triangles(12, 3, 4, 0x0, 13, 3, 12, 0x0),
+    gsSP1Triangle(6, 3, 13, 0x0),
+    gsSPVertex(ghost_mario_tshirt_shared_dl_vertex_group3, 5, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 1, 0, 0x0),
+    gsSP1Triangle(1, 4, 2, 0x0),
+    gsSPEndDisplayList(),
+};
+
+//
+// Head
+//
+
+static const Vtx ghost_mario_m_logo_dl_vertex[] = {
+    {{{   195,     93,     32}, 0, {   744,    732}, {0x51, 0x54, 0x30, 0xff}}},
+    {{{   153,     33,     95}, 0, {  1250,   1066}, {0x04, 0x46, 0x69, 0xff}}},
+    {{{   252,     62,     70}, 0, {  1032,    152}, {0x39, 0x4a, 0x55, 0xff}}},
+    {{{   272,     85,      0}, 0, {   472,    -16}, {0x5f, 0x54, 0x00, 0xff}}},
+    {{{   252,     62,    -69}, 0, {   -78,    158}, {0x39, 0x4a, 0xab, 0xff}}},
+    {{{   195,     93,    -31}, 0, {   232,    736}, {0x51, 0x54, 0xcf, 0xff}}},
+    {{{   153,     33,    -94}, 0, {  -258,   1076}, {0x03, 0x46, 0x97, 0xff}}},
+};
+
+static const Vtx ghost_mario_eyes_cap_on_dl_vertex[] = {
+    {{{   145,    101,      0}, 0, {   480,    446}, {0x13, 0x7d, 0x00, 0xff}}},
+    {{{   108,    105,      0}, 0, {   488,    854}, {0x69, 0x46, 0x00, 0xff}}},
+    {{{    97,    103,     25}, 0, {   724,    958}, {0x40, 0x5a, 0x3d, 0xff}}},
+    {{{    97,    103,    -24}, 0, {   256,    970}, {0x40, 0x5a, 0xc3, 0xff}}},
+    {{{   175,     91,    -38}, 0, {   106,    130}, {0xc6, 0x6d, 0xe7, 0xff}}},
+    {{{   144,     83,    -66}, 0, {  -146,    460}, {0x19, 0x5b, 0xad, 0xff}}},
+    {{{   104,     87,    -69}, 0, {  -160,    898}, {0x30, 0x5c, 0xb7, 0xff}}},
+    {{{   175,     91,     39}, 0, {   842,    112}, {0xc6, 0x6d, 0x19, 0xff}}},
+    {{{   153,     33,    -94}, 0, {  -404,    342}, {0x03, 0x46, 0x97, 0xff}}},
+    {{{   104,     87,     70}, 0, {  1138,    864}, {0x30, 0x5c, 0x49, 0xff}}},
+    {{{   144,     83,     67}, 0, {  1108,    428}, {0x19, 0x5b, 0x53, 0xff}}},
+    {{{   153,     33,     95}, 0, {  1362,    296}, {0x04, 0x46, 0x69, 0xff}}},
+};
+
+static const Vtx ghost_mario_hair_sideburn_cap_on_dl_vertex[] = {
+    {{{   120,    -12,   -109}, 0, {   916,    184}, {0xed, 0x24, 0x88, 0xff}}},
+    {{{    96,     49,    -93}, 0, {   -70,    700}, {0x11, 0x27, 0x89, 0xff}}},
+    {{{   153,     33,    -94}, 0, {    90,    -58}, {0x03, 0x46, 0x97, 0xff}}},
+    {{{    85,    -23,   -110}, 0, {  1150,    582}, {0x06, 0x59, 0xa6, 0xff}}},
+    {{{    42,      0,   -102}, 0, {   842,   1210}, {0xc3, 0x05, 0x92, 0xff}}},
+    {{{    44,     44,    -96}, 0, {   118,   1334}, {0xda, 0x21, 0x8c, 0xff}}},
+    {{{    96,     49,     94}, 0, {   -74,    726}, {0x10, 0x28, 0x77, 0xff}}},
+    {{{    44,     44,     97}, 0, {   196,   1366}, {0xda, 0x21, 0x74, 0xff}}},
+    {{{    42,      0,    103}, 0, {   968,   1192}, {0xc3, 0x05, 0x6e, 0xff}}},
+    {{{    85,    -23,    111}, 0, {  1238,    518}, {0x04, 0x58, 0x5a, 0xff}}},
+    {{{   120,    -11,    111}, 0, {   922,    122}, {0xed, 0x24, 0x78, 0xff}}},
+    {{{   153,     33,     95}, 0, {    22,    -68}, {0x04, 0x46, 0x69, 0xff}}},
+};
+
+static const Vtx ghost_mario_mustache_cap_on_dl_vertex_group1[] = {
+    {{{    77,    108,     34}, 0, {   342,    368}, {0x0e, 0x16, 0x7c, 0xff}}},
+    {{{    92,     88,     84}, 0, {   898,    -18}, {0x23, 0x59, 0x53, 0xff}}},
+    {{{    97,    103,     25}, 0, {   224,    146}, {0x40, 0x5a, 0x3d, 0xff}}},
+    {{{    48,     94,     76}, 0, {   888,    564}, {0xd7, 0x60, 0x47, 0xff}}},
+    {{{    52,    111,     31}, 0, {   354,    690}, {0xa8, 0x33, 0x4b, 0xff}}},
+    {{{    27,    100,     30}, 0, {   442,    982}, {0xb1, 0x60, 0x16, 0xff}}},
+    {{{    41,    109,      0}, 0, {    70,    924}, {0x95, 0x44, 0x00, 0xff}}},
+    {{{    44,     44,     97}, 0, {  1296,    438}, {0xda, 0x21, 0x74, 0xff}}},
+    {{{     3,     54,     52}, 0, {   892,   1090}, {0x95, 0x1d, 0x3c, 0xff}}},
+    {{{    52,    111,    -30}, 0, {   340,    684}, {0xa8, 0x32, 0xb5, 0xff}}},
+    {{{    48,     94,    -75}, 0, {   856,    608}, {0xd7, 0x60, 0xb9, 0xff}}},
+    {{{    27,    100,    -29}, 0, {   394,    998}, {0xb1, 0x60, 0xea, 0xff}}},
+    {{{     3,     54,    -51}, 0, {   806,   1162}, {0x95, 0x1d, 0xc4, 0xff}}},
+    {{{    44,     44,    -96}, 0, {  1250,    518}, {0xda, 0x21, 0x8c, 0xff}}},
+    {{{    77,    108,    -33}, 0, {   362,    344}, {0x0e, 0x16, 0x84, 0xff}}},
+    {{{    41,    109,      0}, 0, {    50,    900}, {0x95, 0x44, 0x00, 0xff}}},
+};
+
+static const Vtx ghost_mario_mustache_cap_on_dl_vertex_group2[] = {
+    {{{    48,     94,    -75}, 0, {   856,    608}, {0xd7, 0x60, 0xb9, 0xff}}},
+    {{{    77,    108,    -33}, 0, {   362,    344}, {0x0e, 0x16, 0x84, 0xff}}},
+    {{{    92,     88,    -83}, 0, {   922,     -4}, {0x23, 0x59, 0xad, 0xff}}},
+    {{{    97,    103,    -24}, 0, {   274,    100}, {0x40, 0x5a, 0xc3, 0xff}}},
+    {{{    44,     44,    -96}, 0, {  1250,    518}, {0xda, 0x21, 0x8c, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_cap_dl_vertex_group1[] = {
+    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
+    {{{   122,   -139,    -48}, 0, {     0,      0}, {0x28, 0x94, 0xcd, 0xff}}},
+    {{{   131,    -56,   -123}, 0, {     0,      0}, {0xde, 0xd4, 0x8f, 0xff}}},
+    {{{   187,     -6,   -133}, 0, {     0,      0}, {0x1e, 0x04, 0x85, 0xff}}},
+    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
+    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+    {{{    77,   -138,    -50}, 0, {     0,      0}, {0xbc, 0x9e, 0xd8, 0xff}}},
+    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
+    {{{   122,   -139,     49}, 0, {     0,      0}, {0x2d, 0x8f, 0x22, 0xff}}},
+    {{{    77,   -138,     51}, 0, {     0,      0}, {0xc1, 0xa4, 0x3c, 0xff}}},
+    {{{    64,   -103,     52}, 0, {     0,      0}, {0xc9, 0x9a, 0x31, 0xff}}},
+    {{{   131,    -56,    124}, 0, {     0,      0}, {0xdf, 0xd3, 0x71, 0xff}}},
+    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
+    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+    {{{   187,     -6,    134}, 0, {     0,      0}, {0x1f, 0x04, 0x7a, 0xff}}},
+    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_cap_dl_vertex_group2[] = {
+    {{{   153,     33,    -94}, 0, {     0,      0}, {0x03, 0x46, 0x97, 0xff}}},
+    {{{   187,     -6,   -133}, 0, {     0,      0}, {0x1e, 0x04, 0x85, 0xff}}},
+    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
+    {{{   175,     91,    -38}, 0, {     0,      0}, {0xc6, 0x6d, 0xe7, 0xff}}},
+    {{{   173,    132,    -65}, 0, {     0,      0}, {0xda, 0x5a, 0xb0, 0xff}}},
+    {{{   195,     93,    -31}, 0, {     0,      0}, {0x51, 0x54, 0xcf, 0xff}}},
+    {{{   252,     62,    -69}, 0, {     0,      0}, {0x39, 0x4a, 0xab, 0xff}}},
+    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
+    {{{   271,      0,    -41}, 0, {     0,      0}, {0x6e, 0xcf, 0xdc, 0xff}}},
+    {{{   187,     -6,    134}, 0, {     0,      0}, {0x1f, 0x04, 0x7a, 0xff}}},
+    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
+    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
+    {{{   252,     62,     70}, 0, {     0,      0}, {0x39, 0x4a, 0x55, 0xff}}},
+    {{{   271,      0,     42}, 0, {     0,      0}, {0x71, 0xdc, 0x2b, 0xff}}},
+    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_cap_dl_vertex_group3[] = {
+    {{{   195,     93,     32}, 0, {     0,      0}, {0x51, 0x54, 0x30, 0xff}}},
+    {{{   173,    132,     66}, 0, {     0,      0}, {0xda, 0x5a, 0x50, 0xff}}},
+    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
+    {{{   175,     91,     39}, 0, {     0,      0}, {0xc6, 0x6d, 0x19, 0xff}}},
+    {{{   164,    -89,    -74}, 0, {     0,      0}, {0x51, 0xa9, 0xd5, 0xff}}},
+    {{{   271,      0,    -41}, 0, {     0,      0}, {0x6e, 0xcf, 0xdc, 0xff}}},
+    {{{   164,    -89,     75}, 0, {     0,      0}, {0x4e, 0xa6, 0x2b, 0xff}}},
+    {{{   271,      0,     42}, 0, {     0,      0}, {0x71, 0xdc, 0x2b, 0xff}}},
+    {{{   252,     62,    -69}, 0, {     0,      0}, {0x39, 0x4a, 0xab, 0xff}}},
+    {{{   272,     85,      0}, 0, {     0,      0}, {0x5f, 0x54, 0x00, 0xff}}},
+    {{{   182,    155,      0}, 0, {     0,      0}, {0xed, 0x7d, 0x00, 0xff}}},
+    {{{   195,     93,    -31}, 0, {     0,      0}, {0x51, 0x54, 0xcf, 0xff}}},
+    {{{   175,     91,    -38}, 0, {     0,      0}, {0xc6, 0x6d, 0xe7, 0xff}}},
+    {{{   173,    132,    -65}, 0, {     0,      0}, {0xda, 0x5a, 0xb0, 0xff}}},
+    {{{   252,     62,     70}, 0, {     0,      0}, {0x39, 0x4a, 0x55, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_part_cap_on_dl_vertex_group1[] = {
+    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
+    {{{    27,    100,    -29}, 0, {     0,      0}, {0xb1, 0x60, 0xea, 0xff}}},
+    {{{    27,    100,     30}, 0, {     0,      0}, {0xb1, 0x60, 0x16, 0xff}}},
+    {{{    -7,     62,      0}, 0, {     0,      0}, {0x85, 0x1d, 0x00, 0xff}}},
+    {{{     3,     54,     52}, 0, {     0,      0}, {0x95, 0x1d, 0x3c, 0xff}}},
+    {{{     3,     54,    -51}, 0, {     0,      0}, {0x95, 0x1d, 0xc4, 0xff}}},
+    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
+    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
+    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
+    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
+    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_part_cap_on_dl_vertex_group2[] = {
+    {{{   102,    -33,   -134}, 0, {     0,      0}, {0x32, 0x19, 0x8f, 0xff}}},
+    {{{   120,    -12,   -109}, 0, {     0,      0}, {0xed, 0x24, 0x88, 0xff}}},
+    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+    {{{    64,    -25,    135}, 0, {     0,      0}, {0xcc, 0xe5, 0x70, 0xff}}},
+    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+    {{{   120,    -11,    111}, 0, {     0,      0}, {0xed, 0x24, 0x78, 0xff}}},
+    {{{    85,    -23,    111}, 0, {     0,      0}, {0x04, 0x58, 0x5a, 0xff}}},
+    {{{   102,    -33,    135}, 0, {     0,      0}, {0x30, 0x18, 0x72, 0xff}}},
+    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
+    {{{    85,    -23,   -110}, 0, {     0,      0}, {0x06, 0x59, 0xa6, 0xff}}},
+    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
+    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_part_cap_on_dl_vertex_group3[] = {
+    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+    {{{    64,    -25,   -134}, 0, {     0,      0}, {0xcc, 0xe5, 0x90, 0xff}}},
+    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+    {{{    42,      0,   -102}, 0, {     0,      0}, {0xc3, 0x05, 0x92, 0xff}}},
+    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+    {{{    42,      0,    103}, 0, {     0,      0}, {0xc3, 0x05, 0x6e, 0xff}}},
+    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+    {{{    52,    111,     31}, 0, {     0,      0}, {0xa8, 0x33, 0x4b, 0xff}}},
+    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
+    {{{    41,    109,      0}, 0, {     0,      0}, {0x95, 0x44, 0x00, 0xff}}},
+    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_part_cap_on_dl_vertex_group4[] = {
+    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
+    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
+    {{{    97,    103,     25}, 0, {     0,      0}, {0x40, 0x5a, 0x3d, 0xff}}},
+    {{{   117,    128,      0}, 0, {     0,      0}, {0x7a, 0xe1, 0x06, 0xff}}},
+    {{{   102,    129,     41}, 0, {     0,      0}, {0x45, 0xd6, 0x61, 0xff}}},
+    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+    {{{   108,    105,      0}, 0, {     0,      0}, {0x69, 0x46, 0x00, 0xff}}},
+    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
+    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
+    {{{   104,    162,     41}, 0, {     0,      0}, {0x52, 0x27, 0x58, 0xff}}},
+    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
+    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
+    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
+    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
+    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_part_cap_on_dl_vertex_group5[] = {
+    {{{    47,    131,     41}, 0, {     0,      0}, {0xb0, 0xe4, 0x5e, 0xff}}},
+    {{{    52,    164,     41}, 0, {     0,      0}, {0xc8, 0x3d, 0x5f, 0xff}}},
+    {{{    33,    165,      0}, 0, {     0,      0}, {0x8f, 0x38, 0x09, 0xff}}},
+    {{{    75,    130,     46}, 0, {     0,      0}, {0x00, 0xec, 0x7d, 0xff}}},
+    {{{    77,    108,     34}, 0, {     0,      0}, {0x0e, 0x16, 0x7c, 0xff}}},
+    {{{    78,    163,     46}, 0, {     0,      0}, {0x03, 0x55, 0x5d, 0xff}}},
+    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+    {{{    96,     49,     94}, 0, {     0,      0}, {0x10, 0x28, 0x77, 0xff}}},
+    {{{   153,     33,     95}, 0, {     0,      0}, {0x04, 0x46, 0x69, 0xff}}},
+    {{{   144,     83,     67}, 0, {     0,      0}, {0x19, 0x5b, 0x53, 0xff}}},
+    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+    {{{   104,     87,     70}, 0, {     0,      0}, {0x30, 0x5c, 0x49, 0xff}}},
+    {{{    92,     88,     84}, 0, {     0,      0}, {0x23, 0x59, 0x53, 0xff}}},
+    {{{    44,     44,     97}, 0, {     0,      0}, {0xda, 0x21, 0x74, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_part_cap_on_dl_vertex_group6[] = {
+    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+    {{{   144,     83,    -66}, 0, {     0,      0}, {0x19, 0x5b, 0xad, 0xff}}},
+    {{{   153,     33,    -94}, 0, {     0,      0}, {0x03, 0x46, 0x97, 0xff}}},
+    {{{    96,     49,    -93}, 0, {     0,      0}, {0x11, 0x27, 0x89, 0xff}}},
+    {{{    92,     88,    -83}, 0, {     0,      0}, {0x23, 0x59, 0xad, 0xff}}},
+    {{{   104,     87,    -69}, 0, {     0,      0}, {0x30, 0x5c, 0xb7, 0xff}}},
+    {{{    44,     44,    -96}, 0, {     0,      0}, {0xda, 0x21, 0x8c, 0xff}}},
+    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
+    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
+    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
+    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
+    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
+    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_part_cap_on_dl_vertex_group7[] = {
+    {{{    52,    164,    -40}, 0, {     0,      0}, {0xb8, 0x34, 0xa6, 0xff}}},
+    {{{    47,    131,    -40}, 0, {     0,      0}, {0xbc, 0xde, 0x9c, 0xff}}},
+    {{{    32,    132,      0}, 0, {     0,      0}, {0x84, 0xe8, 0xf8, 0xff}}},
+    {{{    77,    108,    -33}, 0, {     0,      0}, {0x0e, 0x16, 0x84, 0xff}}},
+    {{{    52,    111,    -30}, 0, {     0,      0}, {0xa8, 0x32, 0xb5, 0xff}}},
+    {{{    75,    130,    -45}, 0, {     0,      0}, {0x00, 0xec, 0x83, 0xff}}},
+    {{{   104,    162,    -40}, 0, {     0,      0}, {0x44, 0x31, 0xa1, 0xff}}},
+    {{{   102,    129,    -40}, 0, {     0,      0}, {0x50, 0xdc, 0xa6, 0xff}}},
+    {{{   119,    161,      0}, 0, {     0,      0}, {0x79, 0x23, 0xf6, 0xff}}},
+    {{{    97,    103,    -24}, 0, {     0,      0}, {0x40, 0x5a, 0xc3, 0xff}}},
+    {{{    78,    163,    -45}, 0, {     0,      0}, {0x03, 0x54, 0xa2, 0xff}}},
+    {{{    60,    181,      0}, 0, {     0,      0}, {0xea, 0x7c, 0x00, 0xff}}},
+    {{{   101,    179,      0}, 0, {     0,      0}, {0x27, 0x78, 0x00, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_back_hair_cap_on_dl_vertex_group1[] = {
+    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
+    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
+    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
+    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
+    {{{    58,   -114,     60}, 0, {     0,      0}, {0x57, 0xb4, 0x32, 0xff}}},
+    {{{    64,   -103,     52}, 0, {     0,      0}, {0xc9, 0x9a, 0x31, 0xff}}},
+    {{{    56,    -45,     77}, 0, {     0,      0}, {0xe3, 0xca, 0x6e, 0xff}}},
+    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
+    {{{    91,    -54,     86}, 0, {     0,      0}, {0xd9, 0xaf, 0x59, 0xff}}},
+    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
+    {{{    58,   -114,    -59}, 0, {     0,      0}, {0x57, 0xb4, 0xce, 0xff}}},
+    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
+    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+};
+
+static const Vtx ghost_mario_face_back_hair_cap_on_dl_vertex_group2[] = {
+    {{{    31,    -85,    -86}, 0, {     0,      0}, {0xdb, 0xfd, 0x87, 0xff}}},
+    {{{    35,   -120,    -67}, 0, {     0,      0}, {0xda, 0x94, 0xcb, 0xff}}},
+    {{{     9,    -88,    -58}, 0, {     0,      0}, {0x87, 0xdf, 0xf5, 0xff}}},
+    {{{    17,    -52,    -46}, 0, {     0,      0}, {0x89, 0xf8, 0xd7, 0xff}}},
+    {{{    56,    -45,    -76}, 0, {     0,      0}, {0xe3, 0xca, 0x92, 0xff}}},
+    {{{    91,    -54,    -85}, 0, {     0,      0}, {0xd9, 0xb0, 0xa7, 0xff}}},
+    {{{    64,   -103,    -51}, 0, {     0,      0}, {0xde, 0x94, 0xc7, 0xff}}},
+    {{{    31,    -84,      0}, 0, {     0,      0}, {0xa0, 0xae, 0x00, 0xff}}},
+    {{{    36,   -116,     36}, 0, {     0,      0}, {0xfb, 0x8e, 0xc9, 0xff}}},
+    {{{     9,    -88,     59}, 0, {     0,      0}, {0x87, 0xdf, 0x0b, 0xff}}},
+    {{{    17,    -52,     47}, 0, {     0,      0}, {0x89, 0xf8, 0x29, 0xff}}},
+    {{{    36,   -116,    -35}, 0, {     0,      0}, {0xfb, 0x8e, 0x37, 0xff}}},
+    {{{    35,   -120,     68}, 0, {     0,      0}, {0xda, 0x94, 0x35, 0xff}}},
+    {{{    31,    -85,     87}, 0, {     0,      0}, {0xdb, 0xfd, 0x79, 0xff}}},
+};
+
+static const Gfx ghost_mario_cap_on_shared_dl[] = {
+    gsSPVertex(ghost_mario_m_logo_dl_vertex, 7, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(2, 3, 0, 0x0, 3, 5, 0, 0x0),
+    gsSP1Triangle(4, 6, 5, 0x0),
+    gsSPVertex(ghost_mario_eyes_cap_on_dl_vertex, 12, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(3, 0, 4, 0x0, 6, 3, 5, 0x0),
+    gsSP2Triangles(3, 1, 0, 0x0, 4, 0, 7, 0x0),
+    gsSP2Triangles(5, 4, 8, 0x0, 2, 9, 10, 0x0),
+    gsSP2Triangles(10, 7, 2, 0x0, 11, 7, 10, 0x0),
+    gsSP1Triangle(7, 0, 2, 0x0),
+    gsSPVertex(ghost_mario_hair_sideburn_cap_on_dl_vertex, 12, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 1, 3, 4, 0x0),
+    gsSP2Triangles(4, 5, 1, 0x0, 3, 1, 0, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 8, 9, 6, 0x0),
+    gsSP2Triangles(9, 10, 6, 0x0, 11, 6, 10, 0x0),
+    gsSPVertex(ghost_mario_mustache_cap_on_dl_vertex_group1, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 1, 0, 3, 0x0),
+    gsSP2Triangles(0, 4, 3, 0x0, 5, 3, 4, 0x0),
+    gsSP2Triangles(5, 4, 6, 0x0, 7, 3, 8, 0x0),
+    gsSP2Triangles(8, 3, 5, 0x0, 3, 7, 1, 0x0),
+    gsSP2Triangles(9, 10, 11, 0x0, 12, 10, 13, 0x0),
+    gsSP2Triangles(11, 10, 12, 0x0, 10, 9, 14, 0x0),
+    gsSP1Triangle(15, 9, 11, 0x0),
+    gsSPVertex(ghost_mario_mustache_cap_on_dl_vertex_group2, 5, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 1, 3, 0x0),
+    gsSP1Triangle(2, 4, 0, 0x0),
+    gsSPVertex(ghost_mario_face_part_cap_on_dl_vertex_group1, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 1, 3, 0x0),
+    gsSP2Triangles(3, 4, 2, 0x0, 1, 5, 3, 0x0),
+    gsSP2Triangles(6, 7, 3, 0x0, 7, 4, 3, 0x0),
+    gsSP2Triangles(6, 3, 5, 0x0, 4, 7, 8, 0x0),
+    gsSP2Triangles(9, 4, 8, 0x0, 10, 6, 5, 0x0),
+    gsSP2Triangles(10, 5, 11, 0x0, 12, 13, 14, 0x0),
+    gsSPVertex(ghost_mario_face_part_cap_on_dl_vertex_group2, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(6, 7, 8, 0x0, 5, 6, 8, 0x0),
+    gsSP2Triangles(3, 8, 7, 0x0, 9, 3, 7, 0x0),
+    gsSP2Triangles(3, 9, 4, 0x0, 10, 11, 12, 0x0),
+    gsSP2Triangles(0, 10, 1, 0x0, 10, 0, 11, 0x0),
+    gsSP2Triangles(11, 0, 2, 0x0, 13, 14, 15, 0x0),
+    gsSPVertex(ghost_mario_face_part_cap_on_dl_vertex_group3, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 1, 0, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 3, 0, 7, 0x0),
+    gsSP2Triangles(8, 9, 10, 0x0, 11, 9, 8, 0x0),
+    gsSP2Triangles(12, 13, 8, 0x0, 8, 13, 11, 0x0),
+    gsSP1Triangle(9, 11, 14, 0x0),
+    gsSPVertex(ghost_mario_face_part_cap_on_dl_vertex_group4, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 2, 0x0),
+    gsSP2Triangles(5, 2, 4, 0x0, 2, 6, 3, 0x0),
+    gsSP2Triangles(3, 6, 7, 0x0, 8, 9, 3, 0x0),
+    gsSP2Triangles(9, 4, 3, 0x0, 7, 10, 3, 0x0),
+    gsSP2Triangles(3, 10, 8, 0x0, 11, 4, 9, 0x0),
+    gsSP2Triangles(12, 11, 9, 0x0, 13, 9, 8, 0x0),
+    gsSP2Triangles(9, 13, 12, 0x0, 4, 11, 5, 0x0),
+    gsSP1Triangle(14, 15, 11, 0x0),
+    gsSPVertex(ghost_mario_face_part_cap_on_dl_vertex_group5, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 0, 4, 0x0),
+    gsSP2Triangles(1, 5, 6, 0x0, 1, 3, 5, 0x0),
+    gsSP2Triangles(2, 1, 6, 0x0, 2, 6, 7, 0x0),
+    gsSP2Triangles(8, 9, 10, 0x0, 6, 5, 11, 0x0),
+    gsSP2Triangles(12, 13, 8, 0x0, 10, 12, 8, 0x0),
+    gsSP1Triangle(14, 8, 13, 0x0),
+    gsSPVertex(ghost_mario_face_part_cap_on_dl_vertex_group6, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(5, 6, 7, 0x0, 6, 5, 8, 0x0),
+    gsSP2Triangles(5, 7, 3, 0x0, 9, 10, 11, 0x0),
+    gsSP2Triangles(6, 12, 7, 0x0, 13, 10, 9, 0x0),
+    gsSP2Triangles(14, 13, 9, 0x0, 15, 10, 13, 0x0),
+    gsSPVertex(ghost_mario_face_part_cap_on_dl_vertex_group7, 13, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 1, 0x0),
+    gsSP2Triangles(1, 5, 3, 0x0, 2, 1, 4, 0x0),
+    gsSP2Triangles(5, 6, 7, 0x0, 7, 6, 8, 0x0),
+    gsSP2Triangles(7, 9, 3, 0x0, 5, 7, 3, 0x0),
+    gsSP2Triangles(10, 11, 12, 0x0, 12, 6, 10, 0x0),
+    gsSP1Triangle(12, 8, 6, 0x0),
+    gsSPVertex(ghost_mario_face_cap_dl_vertex_group1, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 2, 4, 0x0),
+    gsSP2Triangles(4, 2, 5, 0x0, 3, 0, 2, 0x0),
+    gsSP2Triangles(2, 1, 6, 0x0, 6, 7, 2, 0x0),
+    gsSP2Triangles(5, 2, 7, 0x0, 6, 1, 8, 0x0),
+    gsSP2Triangles(8, 1, 0, 0x0, 6, 8, 9, 0x0),
+    gsSP2Triangles(10, 7, 6, 0x0, 9, 10, 6, 0x0),
+    gsSP2Triangles(11, 10, 9, 0x0, 9, 8, 11, 0x0),
+    gsSP2Triangles(11, 8, 12, 0x0, 0, 12, 8, 0x0),
+    gsSP2Triangles(13, 10, 11, 0x0, 11, 12, 14, 0x0),
+    gsSP2Triangles(15, 11, 14, 0x0, 13, 11, 15, 0x0),
+    gsSPVertex(ghost_mario_face_cap_dl_vertex_group2, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 0, 0x0),
+    gsSP2Triangles(4, 5, 0, 0x0, 0, 6, 1, 0x0),
+    gsSP2Triangles(7, 1, 8, 0x0, 8, 1, 6, 0x0),
+    gsSP2Triangles(9, 10, 11, 0x0, 9, 12, 10, 0x0),
+    gsSP2Triangles(12, 9, 13, 0x0, 13, 9, 14, 0x0),
+    gsSPVertex(ghost_mario_face_cap_dl_vertex_group3, 15, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 2, 1, 3, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 5, 7, 6, 0x0),
+    gsSP2Triangles(8, 9, 5, 0x0, 0, 10, 1, 0x0),
+    gsSP2Triangles(1, 10, 3, 0x0, 11, 10, 0, 0x0),
+    gsSP2Triangles(12, 3, 10, 0x0, 12, 10, 13, 0x0),
+    gsSP2Triangles(13, 10, 11, 0x0, 5, 9, 7, 0x0),
+    gsSP1Triangle(7, 9, 14, 0x0),
+    gsSPVertex(ghost_mario_face_back_hair_cap_on_dl_vertex_group1, 16, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 3, 4, 5, 0x0),
+    gsSP2Triangles(5, 6, 7, 0x0, 5, 8, 6, 0x0),
+    gsSP2Triangles(5, 4, 8, 0x0, 7, 3, 5, 0x0),
+    gsSP2Triangles(0, 2, 6, 0x0, 6, 9, 7, 0x0),
+    gsSP2Triangles(0, 6, 8, 0x0, 3, 7, 10, 0x0),
+    gsSP2Triangles(1, 11, 12, 0x0, 12, 13, 14, 0x0),
+    gsSP2Triangles(11, 13, 12, 0x0, 1, 12, 2, 0x0),
+    gsSP2Triangles(14, 2, 12, 0x0, 15, 14, 13, 0x0),
+    gsSPVertex(ghost_mario_face_back_hair_cap_on_dl_vertex_group2, 14, 0),
+    gsSP2Triangles(0, 1, 2, 0x0, 0, 2, 3, 0x0),
+    gsSP2Triangles(4, 5, 6, 0x0, 7, 3, 2, 0x0),
+    gsSP2Triangles(7, 8, 9, 0x0, 9, 10, 7, 0x0),
+    gsSP2Triangles(2, 1, 11, 0x0, 2, 11, 7, 0x0),
+    gsSP2Triangles(9, 12, 13, 0x0, 10, 9, 13, 0x0),
+    gsSP1Triangle(8, 12, 9, 0x0),
+    gsSPEndDisplayList(),
+};
+
+//
+// Ghost Mario geo
+//
+
+static const GeoLayout ghost_mario_geo_body[] = {
+    GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, NULL),
+    GEO_OPEN_NODE(),
+        GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, ghost_mario_butt),
+        GEO_OPEN_NODE(),
+            GEO_OPEN_NODE(),
+                GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, 0, 0, ghost_mario_torso_shared_dl),
+                GEO_OPEN_NODE(),
+                    GEO_ANIMATED_PART(LAYER_TRANSPARENT, 87, 0, 0, NULL),
+                    GEO_OPEN_NODE(),
+                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_cap_on_shared_dl),
+                    GEO_CLOSE_NODE(),
+                    GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, -10, 79, NULL),
+                    GEO_OPEN_NODE(),
+                        GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, ghost_mario_left_arm_shared_dl),
+                        GEO_OPEN_NODE(),
+                            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, ghost_mario_left_forearm_shared_dl),
+                            GEO_OPEN_NODE(),
+                                GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+                                GEO_OPEN_NODE(),
+                                    GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_left_hand_closed_shared_dl),
+                                GEO_CLOSE_NODE(),
+                            GEO_CLOSE_NODE(),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                    GEO_ANIMATED_PART(LAYER_TRANSPARENT, 68, -10, -79, NULL),
+                    GEO_OPEN_NODE(),
+                        GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, ghost_mario_right_arm_shared_dl),
+                        GEO_OPEN_NODE(),
+                            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 65, 0, 0, ghost_mario_right_forearm_shared_dl),
+                            GEO_OPEN_NODE(),
+                                GEO_ANIMATED_PART(LAYER_TRANSPARENT, 60, 0, 0, NULL),
+                                GEO_OPEN_NODE(),
+                                    GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_right_hand_closed),
+                                GEO_CLOSE_NODE(),
+                            GEO_CLOSE_NODE(),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, 42, NULL),
+            GEO_OPEN_NODE(),
+                GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, ghost_mario_left_thigh),
+                GEO_OPEN_NODE(),
+                    GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, ghost_mario_left_leg_shared_dl),
+                    GEO_OPEN_NODE(),
+                        GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, ghost_mario_left_foot_shared_dl),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+            GEO_ANIMATED_PART(LAYER_TRANSPARENT, 13, -8, -42, NULL),
+            GEO_OPEN_NODE(),
+                GEO_ANIMATED_PART(LAYER_TRANSPARENT, 0, 0, 0, ghost_mario_right_thigh_shared_dl),
+                GEO_OPEN_NODE(),
+                    GEO_ANIMATED_PART(LAYER_TRANSPARENT, 89, 0, 0, ghost_mario_right_leg_shared_dl),
+                    GEO_OPEN_NODE(),
+                        GEO_ANIMATED_PART(LAYER_TRANSPARENT, 67, 0, 0, NULL),
+                        GEO_OPEN_NODE(),
+                            GEO_OPEN_NODE(),
+                                GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_right_foot),
+                            GEO_CLOSE_NODE(),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+        GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_RETURN(),
+};
+
+static const GeoLayout ghost_mario_blue_geo[] = {
+    GEO_SHADOW(SHADOW_CIRCLE_PLAYER, 0xB4, 0),
+    GEO_OPEN_NODE(),
+        GEO_SCALE(0x00, 16384),
+        GEO_OPEN_NODE(),
+            GEO_ASM(10, geo_update_layer_transparency),
+            GEO_OPEN_NODE(),
+                GEO_NODE_START(),
+                GEO_OPEN_NODE(),
+                    GEO_RENDER_RANGE(-2048, 32767),
+                    GEO_OPEN_NODE(),
+                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_blue_light_dl),
+                        GEO_OPEN_NODE(),
+                            GEO_BRANCH(1, ghost_mario_geo_body),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+        GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
+
+static const GeoLayout ghost_mario_red_geo[] = {
+    GEO_SHADOW(SHADOW_CIRCLE_PLAYER, 0xB4, 0),
+    GEO_OPEN_NODE(),
+        GEO_SCALE(0x00, 16384),
+        GEO_OPEN_NODE(),
+            GEO_ASM(10, geo_update_layer_transparency),
+            GEO_OPEN_NODE(),
+                GEO_NODE_START(),
+                GEO_OPEN_NODE(),
+                    GEO_RENDER_RANGE(-2048, 32767),
+                    GEO_OPEN_NODE(),
+                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_red_light_dl),
+                        GEO_OPEN_NODE(),
+                            GEO_BRANCH(1, ghost_mario_geo_body),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+        GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
+
+static const GeoLayout ghost_mario_green_geo[] = {
+    GEO_SHADOW(SHADOW_CIRCLE_PLAYER, 0xB4, 0),
+    GEO_OPEN_NODE(),
+        GEO_SCALE(0x00, 16384),
+        GEO_OPEN_NODE(),
+            GEO_ASM(10, geo_update_layer_transparency),
+            GEO_OPEN_NODE(),
+                GEO_NODE_START(),
+                GEO_OPEN_NODE(),
+                    GEO_RENDER_RANGE(-2048, 32767),
+                    GEO_OPEN_NODE(),
+                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_green_light_dl),
+                        GEO_OPEN_NODE(),
+                            GEO_BRANCH(1, ghost_mario_geo_body),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+        GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
+
+static const GeoLayout ghost_mario_gold_geo[] = {
+    GEO_SHADOW(SHADOW_CIRCLE_PLAYER, 0xB4, 0),
+    GEO_OPEN_NODE(),
+        GEO_SCALE(0x00, 16384),
+        GEO_OPEN_NODE(),
+            GEO_ASM(10, geo_update_layer_transparency),
+            GEO_OPEN_NODE(),
+                GEO_NODE_START(),
+                GEO_OPEN_NODE(),
+                    GEO_RENDER_RANGE(-2048, 32767),
+                    GEO_OPEN_NODE(),
+                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_gold_light_dl),
+                        GEO_OPEN_NODE(),
+                            GEO_BRANCH(1, ghost_mario_geo_body),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+        GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
+
+
+static const GeoLayout ghost_mario_pink_geo[] = {
+    GEO_SHADOW(SHADOW_CIRCLE_PLAYER, 0xB4, 0),
+    GEO_OPEN_NODE(),
+        GEO_SCALE(0x00, 16384),
+        GEO_OPEN_NODE(),
+            GEO_ASM(10, geo_update_layer_transparency),
+            GEO_OPEN_NODE(),
+                GEO_NODE_START(),
+                GEO_OPEN_NODE(),
+                    GEO_RENDER_RANGE(-2048, 32767),
+                    GEO_OPEN_NODE(),
+                        GEO_DISPLAY_LIST(LAYER_TRANSPARENT, ghost_mario_pink_light_dl),
+                        GEO_OPEN_NODE(),
+                            GEO_BRANCH(1, ghost_mario_geo_body),
+                        GEO_CLOSE_NODE(),
+                    GEO_CLOSE_NODE(),
+                GEO_CLOSE_NODE(),
+            GEO_CLOSE_NODE(),
+        GEO_CLOSE_NODE(),
+    GEO_CLOSE_NODE(),
+    GEO_END(),
+};
diff --git a/src/menu/star_select.c b/src/menu/star_select.c
index 08b988e..cd98026 100644
--- a/src/menu/star_select.c
+++ b/src/menu/star_select.c
@@ -380,4 +380,6 @@ Gfx *geo_act_selector_strings(s16 callContext, UNUSED struct GraphNode *node) {
     if (callContext == GEO_CONTEXT_RENDER) {
         print_act_selector_strings();
+        extern void time_trials_render_star_select_time(s32);
+        time_trials_render_star_select_time(sSelectedActIndex);
     }
     return NULL;

